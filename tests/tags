!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AND	../mlrmcl1.2/Lib/macros.h	91;"	d
APLUSAT	../mlrmcl1.2/Lib/defs.h	107;"	d
ASSERT	../mlrmcl1.2/Lib/macros.h	182;"	d
ASSERT	../mlrmcl1.2/Lib/macros.h	189;"	d
ASSERTP	../mlrmcl1.2/Lib/macros.h	193;"	d
ASSERTP	../mlrmcl1.2/Lib/macros.h	201;"	d
Allocate2WayNodePartitionMemory	../mlrmcl1.2/Lib/rename.h	409;"	d
Allocate2WayPartitionMemory	../mlrmcl1.2/Lib/rename.h	388;"	d
AllocateKWayPartitionMemory	../mlrmcl1.2/Lib/rename.h	166;"	d
AllocateVolKWayPartitionMemory	../mlrmcl1.2/Lib/rename.h	189;"	d
AllocateWorkSpace	../mlrmcl1.2/Lib/memory.c	/^void AllocateWorkSpace(CtrlType *ctrl, GraphType *graph, int nparts)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int nparts)
AllocateWorkSpace	../mlrmcl1.2/Lib/proto.h	/^void AllocateWorkSpace(CtrlType *, GraphType *, int);$/;"	p	signature:(CtrlType *, GraphType *, int)
AllocateWorkSpace	../mlrmcl1.2/Lib/rename.h	220;"	d
AreAllBelow	../mlrmcl1.2/Lib/rename.h	342;"	d
AreAllHVwgtsAbove	../mlrmcl1.2/Lib/rename.h	286;"	d
AreAllHVwgtsBelow	../mlrmcl1.2/Lib/rename.h	285;"	d
AreAllVwgtsAbove	../mlrmcl1.2/Lib/rename.h	340;"	d
AreAllVwgtsBelow	../mlrmcl1.2/Lib/rename.h	338;"	d
AreAllVwgtsBelowFast	../mlrmcl1.2/Lib/rename.h	308;"	d
AreAnyVwgtsBelow	../mlrmcl1.2/Lib/rename.h	339;"	d
AtimesATranspose	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* AtimesATranspose(Matrix* A, wgttype*$/;"	f	signature:(Matrix* A, wgttype* outerDiagonalFactor, wgttype* innerDiagonalFactor, int rowStart, int rowEnd, int colStart, int colEnd, wgttype threshold, timer* sortTimer)
AtimesATranspose	../mlrmcl1.2/Lib/proto.h	/^Matrix* AtimesATranspose(Matrix*, wgttype*, wgttype*, int, int,$/;"	p	signature:(Matrix*, wgttype*, wgttype*, int, int, int, int, wgttype, timer*)
AtimesATransposeBlocking	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* AtimesATransposeBlocking(Matrix* A, wgttype* outerDiagonalFactor,$/;"	f	signature:(Matrix* A, wgttype* outerDiagonalFactor, wgttype* innerDiagonalFactor, int blockSize, wgttype threshold )
AtimesATransposeBlocking	../mlrmcl1.2/Lib/proto.h	/^Matrix* AtimesATransposeBlocking(Matrix* , wgttype*, wgttype*,$/;"	p	signature:(Matrix* , wgttype*, wgttype*, int, wgttype)
AuxTmr1	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
AuxTmr2	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
AuxTmr3	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
AuxTmr4	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
AuxTmr5	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
AuxTmr6	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
BCPLUSCC	../mlrmcl1.2/Lib/defs.h	106;"	d
BINDIR	../mlrmcl1.2/Programs/Makefile	/^BINDIR = ..$/;"	m
BNDDelete	../mlrmcl1.2/Lib/macros.h	168;"	d
BNDInsert	../mlrmcl1.2/Lib/macros.h	161;"	d
Balance2Way	../mlrmcl1.2/Lib/rename.h	75;"	d
BetterBalance	../mlrmcl1.2/Lib/rename.h	243;"	d
BetterVBalance	../mlrmcl1.2/Lib/rename.h	307;"	d
Bnd2WayBalance	../mlrmcl1.2/Lib/rename.h	76;"	d
BucketSortKeysInc	../mlrmcl1.2/Lib/proto.h	/^void BucketSortKeysInc(int, int, idxtype *, idxtype *, idxtype *);$/;"	p	signature:(int, int, idxtype *, idxtype *, idxtype *)
BucketSortKeysInc	../mlrmcl1.2/Lib/rename.h	81;"	d
BucketSortKeysInc	../mlrmcl1.2/Lib/util.c	/^void BucketSortKeysInc(int n, int max, idxtype *keys, idxtype *tperm, idxtype *perm)$/;"	f	signature:(int n, int max, idxtype *keys, idxtype *tperm, idxtype *perm)
CC	../makefile	/^CC=icpc$/;"	m
CC	../pure_c_spmm/makefile	/^CC=icpc$/;"	m
CC	../tests/makefile	/^CC=icpc$/;"	m
CFLAGS	../makefile	/^CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)$/;"	m
CFLAGS	../mlrmcl1.2/Lib/Makefile	/^CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)$/;"	m
CFLAGS	../mlrmcl1.2/Programs/Makefile	/^CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)$/;"	m
CFLAGS	../nlibs/Makefile	/^CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)$/;"	m
CFLAGS	../pure_c_spmm/makefile	/^CFLAGS=-std=c++0x -g -openmp -fast #-Dprofiling$/;"	m
CFLAGS	../tests/makefile	/^CFLAGS = $(COPTIONS) $(OPTFLAGS) $(INCLUDES)$/;"	m
COARSEN_FRACTION	../mlrmcl1.2/Lib/defs.h	221;"	d
COARSEN_FRACTION2	../mlrmcl1.2/Lib/defs.h	222;"	d
COMPRESSION_FRACTION	../mlrmcl1.2/Lib/defs.h	225;"	d
COO	../nlibs/COO.cc	/^COO::COO() {$/;"	f	class:COO	signature:()
COO	../nlibs/COO.cc	/^COO::COO(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO	../nlibs/COO.h	/^	COO();$/;"	p	class:COO	access:public	signature:()
COO	../nlibs/COO.h	/^  COO(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO	../nlibs/COO.h	/^class COO {$/;"	c
COO	../pure_c_spmm/COO.cc	/^COO::COO() {$/;"	f	class:COO	signature:()
COO	../pure_c_spmm/COO.cc	/^COO::COO(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO	../pure_c_spmm/COO.h	/^	COO();$/;"	p	class:COO	access:public	signature:()
COO	../pure_c_spmm/COO.h	/^  COO(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO	../pure_c_spmm/COO.h	/^class COO {$/;"	c
COO::COO	../nlibs/COO.cc	/^COO::COO() {$/;"	f	class:COO	signature:()
COO::COO	../nlibs/COO.cc	/^COO::COO(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO::COO	../nlibs/COO.h	/^	COO();$/;"	p	class:COO	access:public	signature:()
COO::COO	../nlibs/COO.h	/^  COO(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO::COO	../pure_c_spmm/COO.cc	/^COO::COO() {$/;"	f	class:COO	signature:()
COO::COO	../pure_c_spmm/COO.cc	/^COO::COO(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO::COO	../pure_c_spmm/COO.h	/^	COO();$/;"	p	class:COO	access:public	signature:()
COO::COO	../pure_c_spmm/COO.h	/^  COO(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO::addSelfLoopIfNeeded	../nlibs/COO.cc	/^void COO::addSelfLoopIfNeeded() {$/;"	f	class:COO	signature:()
COO::addSelfLoopIfNeeded	../nlibs/COO.h	/^  void addSelfLoopIfNeeded();$/;"	p	class:COO	access:public	signature:()
COO::cols	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::cols	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::cooColIndex	../nlibs/COO.h	/^	int * cooColIndex;$/;"	m	class:COO	access:private
COO::cooColIndex	../pure_c_spmm/COO.h	/^	int * cooColIndex;$/;"	m	class:COO	access:private
COO::cooRowIndex	../nlibs/COO.h	/^	int * cooRowIndex;$/;"	m	class:COO	access:private
COO::cooRowIndex	../pure_c_spmm/COO.h	/^	int * cooRowIndex;$/;"	m	class:COO	access:private
COO::cooVal	../nlibs/COO.h	/^	double * cooVal;$/;"	m	class:COO	access:private
COO::cooVal	../pure_c_spmm/COO.h	/^	double * cooVal;$/;"	m	class:COO	access:private
COO::makeOrdered	../nlibs/COO.cc	/^void COO::makeOrdered() const {$/;"	f	class:COO	signature:() const
COO::makeOrdered	../nlibs/COO.h	/^  void makeOrdered() const;$/;"	p	class:COO	access:public	signature:() const
COO::makeOrdered	../pure_c_spmm/COO.cc	/^void COO::makeOrdered() const {$/;"	f	class:COO	signature:() const
COO::makeOrdered	../pure_c_spmm/COO.h	/^  void makeOrdered() const;$/;"	p	class:COO	access:public	signature:() const
COO::nnz	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::nnz	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::output	../nlibs/COO.cc	/^void COO::output(const char* msg) {$/;"	f	class:COO	signature:(const char* msg)
COO::output	../nlibs/COO.h	/^	void output(const char* msg);$/;"	p	class:COO	access:public	signature:(const char* msg)
COO::output	../pure_c_spmm/COO.cc	/^void COO::output(const char* msg) {$/;"	f	class:COO	signature:(const char* msg)
COO::output	../pure_c_spmm/COO.h	/^	void output(const char* msg);$/;"	p	class:COO	access:public	signature:(const char* msg)
COO::readMatrixMarketFile	../nlibs/COO.cc	/^void COO::readMatrixMarketFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO::readMatrixMarketFile	../nlibs/COO.h	/^	void readMatrixMarketFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO::readMatrixMarketFile	../pure_c_spmm/COO.cc	/^void COO::readMatrixMarketFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO::readMatrixMarketFile	../pure_c_spmm/COO.h	/^	void readMatrixMarketFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO::readTransposedSNAPFile	../nlibs/COO.cc	/^void COO::readTransposedSNAPFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
COO::readTransposedSNAPFile	../nlibs/COO.h	/^  void readTransposedSNAPFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
COO::rows	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::rows	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
COO::toCSR	../nlibs/COO.cc	/^CSR COO::toCSR() const {$/;"	f	class:COO	signature:() const
COO::toCSR	../nlibs/COO.h	/^	CSR toCSR() const;$/;"	p	class:COO	access:public	signature:() const
COO::toCSR	../pure_c_spmm/COO.cc	/^CSR COO::toCSR() const {$/;"	f	class:COO	signature:() const
COO::toCSR	../pure_c_spmm/COO.h	/^	CSR toCSR() const;$/;"	p	class:COO	access:public	signature:() const
COO::~COO	../nlibs/COO.cc	/^COO::~COO() {$/;"	f	class:COO	signature:()
COO::~COO	../nlibs/COO.h	/^	virtual ~COO();$/;"	p	class:COO	access:public	signature:()
COO::~COO	../pure_c_spmm/COO.cc	/^COO::~COO() {$/;"	f	class:COO	signature:()
COO::~COO	../pure_c_spmm/COO.h	/^	virtual ~COO();$/;"	p	class:COO	access:public	signature:()
COO_H_	../nlibs/COO.h	2;"	d
COO_H_	../pure_c_spmm/COO.h	2;"	d
CPU_CSR_KERNEL_H_	../nlibs/cpu_csr_kernel.h	2;"	d
CPU_CSR_KERNEL_H_	../pure_c_spmm/cpu_csr_kernel.h	2;"	d
CSR	../nlibs/CSR.h	/^	CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR	../nlibs/CSR.h	/^	CSR(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz) {$/;"	f	struct:CSR	access:public	signature:(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz)
CSR	../nlibs/CSR.h	/^struct CSR {$/;"	s
CSR	../pure_c_spmm/CSR.h	/^	CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR	../pure_c_spmm/CSR.h	/^	CSR(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz) {$/;"	f	struct:CSR	access:public	signature:(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz)
CSR	../pure_c_spmm/CSR.h	/^struct CSR {$/;"	s
CSR::CSR	../nlibs/CSR.h	/^	CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR::CSR	../nlibs/CSR.h	/^	CSR(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz) {$/;"	f	struct:CSR	access:public	signature:(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz)
CSR::CSR	../pure_c_spmm/CSR.h	/^	CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR::CSR	../pure_c_spmm/CSR.h	/^	CSR(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz) {$/;"	f	struct:CSR	access:public	signature:(double* values, int* colInd, int* rowPtr, int rows, int cols, int nnz)
CSR::averAndNormRowValue	../nlibs/CSR.cc	/^void CSR::averAndNormRowValue() {$/;"	f	class:CSR	signature:()
CSR::averAndNormRowValue	../nlibs/CSR.h	/^  void averAndNormRowValue();$/;"	p	struct:CSR	access:public	signature:()
CSR::colInd	../nlibs/CSR.h	/^	int* colInd;$/;"	m	struct:CSR	access:public
CSR::colInd	../pure_c_spmm/CSR.h	/^	int* colInd;$/;"	m	struct:CSR	access:public
CSR::cols	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::cols	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::deepCopy	../nlibs/CSR.cc	/^CSR CSR::deepCopy() {$/;"	f	class:CSR	signature:()
CSR::deepCopy	../nlibs/CSR.h	/^ CSR deepCopy();$/;"	p	struct:CSR	access:public	signature:()
CSR::differs	../nlibs/CSR.cc	/^double CSR::differs(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
CSR::differs	../nlibs/CSR.h	/^  double differs(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
CSR::isEqual	../nlibs/CSR.h	/^  bool isEqual(const CSR &B) const {$/;"	f	struct:CSR	access:public	signature:(const CSR &B) const
CSR::isEqual	../pure_c_spmm/CSR.h	/^  bool isEqual(const CSR &B) const {$/;"	f	struct:CSR	access:public	signature:(const CSR &B) const
CSR::makeOrdered	../nlibs/CSR.cc	/^void CSR::makeOrdered() {$/;"	f	class:CSR	signature:()
CSR::makeOrdered	../nlibs/CSR.h	/^  void makeOrdered();$/;"	p	struct:CSR	access:public	signature:()
CSR::makeOrdered	../pure_c_spmm/CSR.cc	/^void CSR::makeOrdered() {$/;"	f	class:CSR	signature:()
CSR::makeOrdered	../pure_c_spmm/CSR.h	/^  void makeOrdered();$/;"	p	struct:CSR	access:public	signature:()
CSR::matrixRowReorder	../nlibs/CSR.cc	/^void CSR::matrixRowReorder(const int* ranks) const {$/;"	f	class:CSR	signature:(const int* ranks) const
CSR::matrixRowReorder	../nlibs/CSR.h	/^  void matrixRowReorder(const int* ranks) const;$/;"	p	struct:CSR	access:public	signature:(const int* ranks) const
CSR::matrixRowReorder	../pure_c_spmm/CSR.cc	/^void CSR::matrixRowReorder(const int* ranks) const {$/;"	f	class:CSR	signature:(const int* ranks) const
CSR::matrixRowReorder	../pure_c_spmm/CSR.h	/^  void matrixRowReorder(const int* ranks) const;$/;"	p	struct:CSR	access:public	signature:(const int* ranks) const
CSR::nnz	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::nnz	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::omp_spmm	../nlibs/CSR.cc	/^CSR CSR::omp_spmm(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
CSR::omp_spmm	../nlibs/CSR.h	/^  CSR omp_spmm(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
CSR::omp_spmm	../pure_c_spmm/CSR.cc	/^CSR CSR::omp_spmm(const CSR& B) {$/;"	f	class:CSR	signature:(const CSR& B)
CSR::omp_spmm	../pure_c_spmm/CSR.h	/^  CSR omp_spmm(const CSR& B);$/;"	p	struct:CSR	access:public	signature:(const CSR& B)
CSR::output	../nlibs/CSR.h	/^  void output(const char* msg) const {$/;"	f	struct:CSR	access:public	signature:(const char* msg) const
CSR::output	../pure_c_spmm/CSR.h	/^  void output(const char* msg) const {$/;"	f	struct:CSR	access:public	signature:(const char* msg) const
CSR::rowCount	../nlibs/CSR.h	/^  inline int rowCount(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
CSR::rowInflationR2	../nlibs/CSR.h	/^  void rowInflationR2(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
CSR::rowMax	../nlibs/CSR.h	/^  inline double rowMax(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
CSR::rowPtr	../nlibs/CSR.h	/^	int* rowPtr;$/;"	m	struct:CSR	access:public
CSR::rowPtr	../pure_c_spmm/CSR.h	/^	int* rowPtr;$/;"	m	struct:CSR	access:public
CSR::rowSum	../nlibs/CSR.h	/^  inline double rowSum(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
CSR::rows	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::rows	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
CSR::spmm	../nlibs/CSR.cc	/^CSR CSR::spmm(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
CSR::spmm	../nlibs/CSR.h	/^  CSR spmm(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
CSR::spmm	../pure_c_spmm/CSR.cc	/^CSR CSR::spmm(const CSR& B) {$/;"	f	class:CSR	signature:(const CSR& B)
CSR::spmm	../pure_c_spmm/CSR.h	/^  CSR spmm(const CSR& B);$/;"	p	struct:CSR	access:public	signature:(const CSR& B)
CSR::spmmFlops	../nlibs/CSR.cc	/^long CSR::spmmFlops(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
CSR::spmmFlops	../nlibs/CSR.h	/^  long spmmFlops(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
CSR::spmmFlops	../pure_c_spmm/CSR.cc	/^long CSR::spmmFlops(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
CSR::spmmFlops	../pure_c_spmm/CSR.h	/^  long spmmFlops(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
CSR::values	../nlibs/CSR.h	/^	double* values;$/;"	m	struct:CSR	access:public
CSR::values	../pure_c_spmm/CSR.h	/^	double* values;$/;"	m	struct:CSR	access:public
CSR::~CSR	../nlibs/CSR.h	/^  ~CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR::~CSR	../pure_c_spmm/CSR.h	/^  ~CSR() {$/;"	f	struct:CSR	access:public	signature:()
CSR_H_	../nlibs/CSR.h	9;"	d
CSR_H_	../pure_c_spmm/CSR.h	9;"	d
CType	../mlrmcl1.2/Lib/struct.h	/^  int CType;			\/* The type of coarsening *\/$/;"	m	struct:controldef	access:public
Change2CNumbering	../mlrmcl1.2/Lib/rename.h	121;"	d
Change2FNumbering	../mlrmcl1.2/Lib/rename.h	122;"	d
Change2FNumbering2	../mlrmcl1.2/Lib/rename.h	123;"	d
Change2FNumberingOrder	../mlrmcl1.2/Lib/rename.h	124;"	d
ChangeMesh2CNumbering	../mlrmcl1.2/Lib/rename.h	125;"	d
ChangeMesh2FNumbering	../mlrmcl1.2/Lib/rename.h	126;"	d
ChangeMesh2FNumbering2	../mlrmcl1.2/Lib/rename.h	127;"	d
CheckBnd	../mlrmcl1.2/Lib/rename.h	103;"	d
CheckBnd2	../mlrmcl1.2/Lib/rename.h	104;"	d
CheckGraph	../mlrmcl1.2/Lib/io.c	/^int CheckGraph(GraphType *graph)$/;"	f	signature:(GraphType *graph)
CheckGraph	../mlrmcl1.2/Lib/proto.h	/^int CheckGraph(GraphType *);$/;"	p	signature:(GraphType *)
CheckHeap	../mlrmcl1.2/Lib/rename.h	383;"	d
CheckNodeBnd	../mlrmcl1.2/Lib/rename.h	105;"	d
CheckNodePartitionParams	../mlrmcl1.2/Lib/rename.h	107;"	d
CheckRInfo	../mlrmcl1.2/Lib/rename.h	106;"	d
CheckVolKWayPartitionParams	../mlrmcl1.2/Lib/rename.h	182;"	d
Coarsen2Way	../mlrmcl1.2/Lib/coarsen.c	/^GraphType *Coarsen2Way(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
Coarsen2Way	../mlrmcl1.2/Lib/proto.h	/^GraphType *Coarsen2Way(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
Coarsen2Way	../mlrmcl1.2/Lib/rename.h	93;"	d
CoarsenTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
CoarsenTo	../mlrmcl1.2/Lib/struct.h	/^  int CoarsenTo;		\/* The # of vertices in the coarsest graph *\/$/;"	m	struct:controldef	access:public
CompressGraph	../mlrmcl1.2/Lib/rename.h	97;"	d
Compute2WayHLoadImbalance	../mlrmcl1.2/Lib/rename.h	244;"	d
Compute2WayHLoadImbalanceVec	../mlrmcl1.2/Lib/rename.h	245;"	d
Compute2WayNodePartitionParams	../mlrmcl1.2/Lib/rename.h	410;"	d
Compute2WayPartitionParams	../mlrmcl1.2/Lib/rename.h	389;"	d
ComputeAdjWgtSums	../mlrmcl1.2/Lib/metrics.c	/^void ComputeAdjWgtSums(GraphType* graph)$/;"	f	signature:(GraphType* graph)
ComputeAdjWgtSums	../mlrmcl1.2/Lib/proto.h	/^void ComputeAdjWgtSums(GraphType*);$/;"	p	signature:(GraphType*)
ComputeCoarseGraphSize	../mlrmcl1.2/Lib/rename.h	113;"	d
ComputeConductance	../mlrmcl1.2/Lib/metrics.c	/^float ComputeConductance(GraphType *graph, idxtype *where, int npart)$/;"	f	signature:(GraphType *graph, idxtype *where, int npart)
ComputeConductance	../mlrmcl1.2/Lib/proto.h	/^float ComputeConductance(GraphType *, idxtype *, int );$/;"	p	signature:(GraphType *, idxtype *, int )
ComputeCut	../mlrmcl1.2/Lib/metrics.c	/^int ComputeCut(GraphType *graph, idxtype *where)$/;"	f	signature:(GraphType *graph, idxtype *where)
ComputeCut	../mlrmcl1.2/Lib/proto.h	/^int ComputeCut(GraphType *, idxtype *);$/;"	p	signature:(GraphType *, idxtype *)
ComputeCut	../mlrmcl1.2/Lib/rename.h	102;"	d
ComputeElementBalance	../mlrmcl1.2/Lib/rename.h	417;"	d
ComputeHKWayLoadImbalance	../mlrmcl1.2/Lib/rename.h	287;"	d
ComputeKWayBalanceBoundary	../mlrmcl1.2/Lib/rename.h	171;"	d
ComputeKWayBoundary	../mlrmcl1.2/Lib/rename.h	170;"	d
ComputeKWayPartitionParams	../mlrmcl1.2/Lib/rename.h	167;"	d
ComputeKWayVolGains	../mlrmcl1.2/Lib/rename.h	191;"	d
ComputeKWayVolume	../mlrmcl1.2/Lib/rename.h	180;"	d
ComputeLoadImbalance	../mlrmcl1.2/Lib/rename.h	341;"	d
ComputeMaxNodeGain	../mlrmcl1.2/Lib/rename.h	404;"	d
ComputeNCut	../mlrmcl1.2/Lib/metrics.c	/^float ComputeNCut(GraphType *graph, idxtype *where, int npart)$/;"	f	signature:(GraphType *graph, idxtype *where, int npart)
ComputeNCut	../mlrmcl1.2/Lib/proto.h	/^float ComputeNCut(GraphType *, idxtype *, int );$/;"	p	signature:(GraphType *, idxtype *, int )
ComputeNCutVector	../mlrmcl1.2/Lib/metrics.c	/^float ComputeNCutVector(GraphType *graph, idxtype *where, int$/;"	f	signature:(GraphType *graph, idxtype *where, int npart,float* ncutVector)
ComputeNCutVector	../mlrmcl1.2/Lib/proto.h	/^float ComputeNCutVector(GraphType*, idxtype*, int, float*);$/;"	p	signature:(GraphType*, idxtype*, int, float*)
ComputeNumEdgesCut	../mlrmcl1.2/Lib/metrics.c	/^int ComputeNumEdgesCut(GraphType* graph, idxtype* where)$/;"	f	signature:(GraphType* graph, idxtype* where)
ComputeNumEdgesCut	../mlrmcl1.2/Lib/proto.h	/^int ComputeNumEdgesCut(GraphType*, idxtype*);$/;"	p	signature:(GraphType*, idxtype*)
ComputePartitionBalance	../mlrmcl1.2/Lib/rename.h	416;"	d
ComputePartitionInfo	../mlrmcl1.2/Lib/rename.h	415;"	d
ComputeSubDomainGraph	../mlrmcl1.2/Lib/rename.h	424;"	d
ComputeVolKWayBalanceBoundary	../mlrmcl1.2/Lib/rename.h	194;"	d
ComputeVolKWayBoundary	../mlrmcl1.2/Lib/rename.h	193;"	d
ComputeVolKWayPartitionParams	../mlrmcl1.2/Lib/rename.h	190;"	d
ComputeVolSubDomainGraph	../mlrmcl1.2/Lib/rename.h	183;"	d
ComputeVolSubset	../mlrmcl1.2/Lib/metrics.c	/^idxtype ComputeVolSubset(GraphType* graph, idxtype* bisection)$/;"	f	signature:(GraphType* graph, idxtype* bisection)
ComputeVolSubset	../mlrmcl1.2/Lib/proto.h	/^idxtype ComputeVolSubset(GraphType*, idxtype*);$/;"	p	signature:(GraphType*, idxtype*)
ComputeVolume	../mlrmcl1.2/Lib/rename.h	181;"	d
ConstructMinCoverSeparator	../mlrmcl1.2/Lib/rename.h	396;"	d
ConstructMinCoverSeparator0	../mlrmcl1.2/Lib/rename.h	395;"	d
ConstructSeparator	../mlrmcl1.2/Lib/rename.h	394;"	d
ContractTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
CreateCoarseGraph	../mlrmcl1.2/Lib/ccgraph.c	/^void CreateCoarseGraph(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)
CreateCoarseGraph	../mlrmcl1.2/Lib/proto.h	/^void CreateCoarseGraph(CtrlType *, GraphType *, int, idxtype *, idxtype *);$/;"	p	signature:(CtrlType *, GraphType *, int, idxtype *, idxtype *)
CreateCoarseGraph	../mlrmcl1.2/Lib/rename.h	85;"	d
CreateCoarseGraphNoMask	../mlrmcl1.2/Lib/ccgraph.c	/^void CreateCoarseGraphNoMask(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)
CreateCoarseGraphNoMask	../mlrmcl1.2/Lib/proto.h	/^void CreateCoarseGraphNoMask(CtrlType *, GraphType *, int, idxtype *, idxtype *);$/;"	p	signature:(CtrlType *, GraphType *, int, idxtype *, idxtype *)
CreateCoarseGraphNoMask	../mlrmcl1.2/Lib/rename.h	86;"	d
CreateCoarseGraph_NVW	../mlrmcl1.2/Lib/ccgraph.c	/^void CreateCoarseGraph_NVW(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)
CreateCoarseGraph_NVW	../mlrmcl1.2/Lib/proto.h	/^void CreateCoarseGraph_NVW(CtrlType *, GraphType *, int, idxtype *, idxtype *);$/;"	p	signature:(CtrlType *, GraphType *, int, idxtype *, idxtype *)
CreateCoarseGraph_NVW	../mlrmcl1.2/Lib/rename.h	87;"	d
CreateCoarseGraph_PowerLaw	../mlrmcl1.2/Lib/ccgraph.c	/^void CreateCoarseGraph_PowerLaw(CtrlType *ctrl, GraphType *graph,$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *cpointers, idxtype *cvwgt)
CreateCoarseGraph_PowerLaw	../mlrmcl1.2/Lib/proto.h	/^void CreateCoarseGraph_PowerLaw(CtrlType*, GraphType*, int,$/;"	p	signature:(CtrlType*, GraphType*, int, idxtype*, idxtype*, idxtype* )
CreateGraph	../mlrmcl1.2/Lib/memory.c	/^GraphType *CreateGraph(void)$/;"	f	signature:(void)
CreateGraph	../mlrmcl1.2/Lib/proto.h	/^GraphType *CreateGraph(void);$/;"	p	signature:(void)
CreateGraph	../mlrmcl1.2/Lib/rename.h	226;"	d
CtrlType	../mlrmcl1.2/Lib/struct.h	/^typedef struct controldef CtrlType;$/;"	t	typeref:struct:controldef
DBG_COARSEN	../mlrmcl1.2/Lib/defs.h	236;"	d
DBG_IPART	../mlrmcl1.2/Lib/defs.h	238;"	d
DBG_KWAYPINFO	../mlrmcl1.2/Lib/defs.h	240;"	d
DBG_MOVEINFO	../mlrmcl1.2/Lib/defs.h	239;"	d
DBG_OUTPUT	../mlrmcl1.2/Lib/defs.h	235;"	d
DBG_REFINE	../mlrmcl1.2/Lib/defs.h	237;"	d
DBG_SEPINFO	../mlrmcl1.2/Lib/defs.h	241;"	d
DBG_TIME	../mlrmcl1.2/Lib/defs.h	234;"	d
DirToUndirOptions	../mlrmcl1.2/Lib/struct.h	/^typedef struct dirToUndirOptionsDef DirToUndirOptions;$/;"	t	typeref:struct:dirToUndirOptionsDef
EDegreeType	../mlrmcl1.2/Lib/struct.h	/^typedef struct edegreedef EDegreeType;$/;"	t	typeref:struct:edegreedef
EXE	../makefile	/^EXE=spmm.x$/;"	m
EXE	../pure_c_spmm/makefile	/^EXE=spmm.x$/;"	m
EXES	../tests/makefile	/^EXES=$(shell echo $(SOURCES) | sed s\/.cc\/.x\/g)$/;"	m
EliminateComponents	../mlrmcl1.2/Lib/rename.h	427;"	d
EliminateSubDomainEdges	../mlrmcl1.2/Lib/rename.h	425;"	d
EliminateVolSubDomainEdges	../mlrmcl1.2/Lib/rename.h	184;"	d
EstimateCFraction	../mlrmcl1.2/Lib/rename.h	112;"	d
FM_2WayEdgeRefine	../mlrmcl1.2/Lib/rename.h	117;"	d
FM_2WayNodeBalance	../mlrmcl1.2/Lib/rename.h	403;"	d
FM_2WayNodeRefine	../mlrmcl1.2/Lib/rename.h	400;"	d
FM_2WayNodeRefineEqWgt	../mlrmcl1.2/Lib/rename.h	401;"	d
FM_2WayNodeRefine_OneSided	../mlrmcl1.2/Lib/rename.h	402;"	d
FindComponents	../mlrmcl1.2/Lib/rename.h	139;"	d
FreeGraph	../mlrmcl1.2/Lib/memory.c	/^void FreeGraph(GraphType *graph)$/;"	f	signature:(GraphType *graph)
FreeGraph	../mlrmcl1.2/Lib/proto.h	/^void FreeGraph(GraphType *);$/;"	p	signature:(GraphType *)
FreeGraph	../mlrmcl1.2/Lib/rename.h	228;"	d
FreeWorkSpace	../mlrmcl1.2/Lib/memory.c	/^void FreeWorkSpace(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
FreeWorkSpace	../mlrmcl1.2/Lib/proto.h	/^void FreeWorkSpace(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
FreeWorkSpace	../mlrmcl1.2/Lib/rename.h	221;"	d
GKfree	../mlrmcl1.2/Lib/proto.h	/^void GKfree(void **,...); $/;"	p	signature:(void **,...)
GKfree	../mlrmcl1.2/Lib/rename.h	439;"	d
GKfree	../mlrmcl1.2/Lib/util.c	/^void GKfree(void **ptr1,...)$/;"	f	signature:(void **ptr1,...)
GKmalloc	../mlrmcl1.2/Lib/macros.h	131;"	d
GKmalloc	../mlrmcl1.2/Lib/proto.h	/^void *GKmalloc(long, const char *);$/;"	p	signature:(long, const char *)
GKmalloc	../mlrmcl1.2/Lib/rename.h	446;"	d
GKmalloc	../mlrmcl1.2/Lib/util.c	/^void *GKmalloc(int nbytes, const char *msg)$/;"	f	signature:(int nbytes, const char *msg)
GKmalloc	../mlrmcl1.2/Lib/util.c	/^void *GKmalloc(long nbytes, const char *msg)$/;"	f	signature:(long nbytes, const char *msg)
General2WayBalance	../mlrmcl1.2/Lib/rename.h	77;"	d
GraphType	../mlrmcl1.2/Lib/struct.h	/^typedef struct graphdef GraphType;$/;"	t	typeref:struct:graphdef
Greedy_KWayEdgeBalance	../mlrmcl1.2/Lib/rename.h	161;"	d
Greedy_KWayEdgeBalanceMConn	../mlrmcl1.2/Lib/rename.h	422;"	d
Greedy_KWayEdgeRefine	../mlrmcl1.2/Lib/rename.h	160;"	d
Greedy_KWayVolBalance	../mlrmcl1.2/Lib/rename.h	177;"	d
Greedy_KWayVolBalanceMConn	../mlrmcl1.2/Lib/rename.h	178;"	d
GrowBisection	../mlrmcl1.2/Lib/rename.h	145;"	d
GrowBisectionNode	../mlrmcl1.2/Lib/rename.h	146;"	d
HASHFCT	../mlrmcl1.2/Lib/macros.h	105;"	d
HEXDUALMETIS	../mlrmcl1.2/Lib/rename.h	234;"	d
HEXNODALMETIS	../mlrmcl1.2/Lib/rename.h	237;"	d
HORIZONTAL_IMBALANCE	../mlrmcl1.2/Lib/defs.h	231;"	d
HTABLE_EMPTY	../mlrmcl1.2/Lib/defs.h	213;"	d
HTLENGTH	../mlrmcl1.2/Lib/defs.h	84;"	d
Hashtable	../mlrmcl1.2/Lib/struct.h	/^typedef struct hashtabledef Hashtable;$/;"	t	typeref:struct:hashtabledef
IDF	../mlrmcl1.2/Lib/defs.h	113;"	d
IDXTYPE_INT	../mlrmcl1.2/Lib/struct.h	74;"	d
IFSET	../mlrmcl1.2/Lib/macros.h	120;"	d
INCLUDES	../mlrmcl1.2/Lib/Makefile	/^INCLUDES = -I. $/;"	m
INCLUDES	../mlrmcl1.2/Programs/Makefile	/^INCLUDES = -I..\/Lib $/;"	m
INCLUDES	../nlibs/Makefile	/^INCLUDES = -I. $/;"	m
INC_DEC	../mlrmcl1.2/Lib/macros.h	98;"	d
INVD	../mlrmcl1.2/Lib/defs.h	112;"	d
INVNORM	../mlrmcl1.2/Lib/defs.h	114;"	d
INVSQRTD	../mlrmcl1.2/Lib/defs.h	111;"	d
IPART_GGPKL	../mlrmcl1.2/Lib/defs.h	188;"	d
IPART_GGPKLNODE	../mlrmcl1.2/Lib/defs.h	189;"	d
IPART_McHPMETIS	../mlrmcl1.2/Lib/defs.h	209;"	d
IPART_McPMETIS	../mlrmcl1.2/Lib/defs.h	208;"	d
IPART_PMETIS	../mlrmcl1.2/Lib/defs.h	196;"	d
IPART_RANDOM	../mlrmcl1.2/Lib/defs.h	190;"	d
IType	../mlrmcl1.2/Lib/struct.h	/^  int IType;			\/* The type of initial partitioning *\/$/;"	m	struct:controldef	access:public
Init2WayPartition	../mlrmcl1.2/Lib/rename.h	143;"	d
InitGraph	../mlrmcl1.2/Lib/memory.c	/^void InitGraph(GraphType *graph)$/;"	f	signature:(GraphType *graph)
InitGraph	../mlrmcl1.2/Lib/proto.h	/^void InitGraph(GraphType *);$/;"	p	signature:(GraphType *)
InitGraph	../mlrmcl1.2/Lib/rename.h	227;"	d
InitPartTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
InitRandom	../mlrmcl1.2/Lib/proto.h	/^void InitRandom(int);$/;"	p	signature:(int)
InitRandom	../mlrmcl1.2/Lib/rename.h	471;"	d
InitRandom	../mlrmcl1.2/Lib/util.c	/^void InitRandom(int seed)$/;"	f	signature:(int seed)
InitSeparator	../mlrmcl1.2/Lib/rename.h	144;"	d
InitTimers	../mlrmcl1.2/Lib/proto.h	/^void InitTimers(CtrlType *);$/;"	p	signature:(CtrlType *)
InitTimers	../mlrmcl1.2/Lib/rename.h	432;"	d
InitTimers	../mlrmcl1.2/Lib/util.c	/^void InitTimers(CtrlType *ctrl)$/;"	f	signature:(CtrlType *ctrl)
IsBalanced	../mlrmcl1.2/Lib/rename.h	169;"	d
IsBetter2wayBalance	../mlrmcl1.2/Lib/rename.h	251;"	d
IsConnected	../mlrmcl1.2/Lib/rename.h	137;"	d
IsConnected2	../mlrmcl1.2/Lib/rename.h	138;"	d
IsConnectedSubdomain	../mlrmcl1.2/Lib/rename.h	136;"	d
IsHBalanceBetterFT	../mlrmcl1.2/Lib/rename.h	289;"	d
IsHBalanceBetterTT	../mlrmcl1.2/Lib/rename.h	290;"	d
IsSeparable	../mlrmcl1.2/Lib/rename.h	108;"	d
KMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	124;"	d
KMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	127;"	d
KMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	125;"	d
KMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	126;"	d
KVMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	157;"	d
KVMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	160;"	d
KVMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	158;"	d
KVMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	159;"	d
KWayVolUpdate	../mlrmcl1.2/Lib/rename.h	179;"	d
KeyValueType	../mlrmcl1.2/Lib/struct.h	/^struct KeyValueType {$/;"	s
KeyValueType	../mlrmcl1.2/Lib/struct.h	/^typedef struct KeyValueType KeyValueType;$/;"	t	typeref:struct:KeyValueType
KeyValueType::key	../mlrmcl1.2/Lib/struct.h	/^  idxtype key;$/;"	m	struct:KeyValueType	access:public
KeyValueType::val	../mlrmcl1.2/Lib/struct.h	/^  idxtype val;$/;"	m	struct:KeyValueType	access:public
LARGENIPARTS	../mlrmcl1.2/Lib/defs.h	218;"	d
LD	../mlrmcl1.2/Lib/Makefile	/^LD = $(CC) -L. $/;"	m
LD	../mlrmcl1.2/Programs/Makefile	/^LD = $(CC) $(LDOPTIONS) -L. -L..$/;"	m
LD	../nlibs/Makefile	/^LD = $(CC) -L. $/;"	m
LDFLAGS	../makefile	/^LDFLAGS=$(NRMCL) -openmp$/;"	m
LDFLAGS	../tests/makefile	/^LDFLAGS=$(NRMCL) -openmp$/;"	m
LEVEL1_DCACHE_LINESIZE	../nlibs/cpu_csr_kernel.h	/^const int LEVEL1_DCACHE_LINESIZE = 64;$/;"	v
LEVEL1_DCACHE_LINESIZE	../pure_c_spmm/cpu_csr_kernel.h	/^const int LEVEL1_DCACHE_LINESIZE = 64;$/;"	v
LIBDIR	../tests/makefile	/^LIBDIR:=..\/$(LIBDIR)$/;"	m
LIBS	../mlrmcl1.2/Programs/Makefile	/^LIBS = -lmlrmcl -lm$/;"	m
LTERM	../mlrmcl1.2/Lib/defs.h	76;"	d
ListGraph	../mlrmcl1.2/Lib/struct.h	/^typedef struct listgraphdef ListGraph;$/;"	t	typeref:struct:listgraphdef
ListInt	../mlrmcl1.2/Lib/struct.h	/^typedef struct intlistdef ListInt;$/;"	t	typeref:struct:intlistdef
ListNodeType	../mlrmcl1.2/Lib/struct.h	/^struct ListNodeType {$/;"	s
ListNodeType	../mlrmcl1.2/Lib/struct.h	/^typedef struct ListNodeType ListNodeType;$/;"	t	typeref:struct:ListNodeType
ListNodeType::id	../mlrmcl1.2/Lib/struct.h	/^  int id;                       	\/* The id value of the node *\/$/;"	m	struct:ListNodeType	access:public
ListNodeType::next	../mlrmcl1.2/Lib/struct.h	/^  struct ListNodeType *prev, *next;     \/* It's a doubly-linked list *\/$/;"	m	struct:ListNodeType	typeref:struct:ListNodeType::	access:public
ListNodeType::prev	../mlrmcl1.2/Lib/struct.h	/^  struct ListNodeType *prev, *next;     \/* It's a doubly-linked list *\/$/;"	m	struct:ListNodeType	typeref:struct:ListNodeType::ListNodeType	access:public
ListWgt	../mlrmcl1.2/Lib/struct.h	/^typedef struct wgtlistdef ListWgt;$/;"	t	typeref:struct:wgtlistdef
M	../mlrmcl1.2/tools/evaluateClusters.py	/^	M = float(len(cluster))$/;"	v
MAKECSR	../mlrmcl1.2/Lib/macros.h	150;"	d
MALLOC_CHECK	../mlrmcl1.2/Lib/macros.h	135;"	d
MALLOC_CHECK	../mlrmcl1.2/Lib/macros.h	142;"	d
MATCH_HASH	../mlrmcl1.2/Lib/defs.h	183;"	d
MATCH_HEM	../mlrmcl1.2/Lib/defs.h	174;"	d
MATCH_HEMN	../mlrmcl1.2/Lib/defs.h	181;"	d
MATCH_POWERLAW_FC	../mlrmcl1.2/Lib/defs.h	184;"	d
MATCH_RM	../mlrmcl1.2/Lib/defs.h	173;"	d
MATCH_SBHEM_INFNORM	../mlrmcl1.2/Lib/defs.h	180;"	d
MATCH_SBHEM_ONENORM	../mlrmcl1.2/Lib/defs.h	179;"	d
MATCH_SHEBM_INFNORM	../mlrmcl1.2/Lib/defs.h	178;"	d
MATCH_SHEBM_ONENORM	../mlrmcl1.2/Lib/defs.h	177;"	d
MATCH_SHEM	../mlrmcl1.2/Lib/defs.h	175;"	d
MATCH_SHEMKWAY	../mlrmcl1.2/Lib/defs.h	176;"	d
MATCH_SHEMN	../mlrmcl1.2/Lib/defs.h	182;"	d
MATCH_UNSPECIFIED	../mlrmcl1.2/Lib/defs.h	185;"	d
MAXIDX	../mlrmcl1.2/Lib/struct.h	94;"	d
MAXLINE	../mlrmcl1.2/Lib/defs.h	74;"	d
MAXNCON	../mlrmcl1.2/Lib/defs.h	78;"	d
MAXNOBJ	../mlrmcl1.2/Lib/defs.h	79;"	d
MCCoarsen2Way	../mlrmcl1.2/Lib/rename.h	216;"	d
MCGreedy_KWayEdgeBalanceHorizontal	../mlrmcl1.2/Lib/rename.h	284;"	d
MCHMlevelEdgeBisection	../mlrmcl1.2/Lib/rename.h	323;"	d
MCHMlevelRecursiveBisection	../mlrmcl1.2/Lib/rename.h	321;"	d
MCMatch_HEM	../mlrmcl1.2/Lib/rename.h	303;"	d
MCMatch_RM	../mlrmcl1.2/Lib/rename.h	302;"	d
MCMatch_SBHEM	../mlrmcl1.2/Lib/rename.h	306;"	d
MCMatch_SHEBM	../mlrmcl1.2/Lib/rename.h	305;"	d
MCMatch_SHEM	../mlrmcl1.2/Lib/rename.h	304;"	d
MCMlevelEdgeBisection	../mlrmcl1.2/Lib/rename.h	322;"	d
MCMlevelKWayPartitioning	../mlrmcl1.2/Lib/rename.h	279;"	d
MCMlevelRecursiveBisection	../mlrmcl1.2/Lib/rename.h	320;"	d
MCRandom_KWayEdgeRefineHorizontal	../mlrmcl1.2/Lib/rename.h	283;"	d
MERGEOBJ	../mlrmcl1.2/Programs/Makefile	/^MERGEOBJ = mergeClusters.o$/;"	m
MLMCL_PRUNE_A	../mlrmcl1.2/Lib/defs.h	100;"	d
MLMCL_PRUNE_A	../nlibs/util.h	5;"	d
MLMCL_PRUNE_B	../mlrmcl1.2/Lib/defs.h	101;"	d
MLMCL_PRUNE_B	../nlibs/util.h	6;"	d
MLRMCLLIB	../mlrmcl1.2/Programs/Makefile	/^MLRMCLLIB = ..\/libmlrmcl.a$/;"	m
MLRMCLOBJ	../mlrmcl1.2/Programs/Makefile	/^MLRMCLOBJ = mlrmcl.o $/;"	m
MMDOrder	../mlrmcl1.2/Lib/rename.h	358;"	d
MMDSWITCH	../mlrmcl1.2/Lib/defs.h	229;"	d
MM_ARRAY_STR	../nlibs/mm_io.h	118;"	d
MM_ARRAY_STR	../pure_c_spmm/mm_io.h	118;"	d
MM_COMPLEX_STR	../nlibs/mm_io.h	122;"	d
MM_COMPLEX_STR	../pure_c_spmm/mm_io.h	122;"	d
MM_COORDINATE_STR	../nlibs/mm_io.h	120;"	d
MM_COORDINATE_STR	../pure_c_spmm/mm_io.h	120;"	d
MM_COULD_NOT_READ_FILE	../nlibs/mm_io.h	92;"	d
MM_COULD_NOT_READ_FILE	../pure_c_spmm/mm_io.h	92;"	d
MM_COULD_NOT_WRITE_FILE	../nlibs/mm_io.h	98;"	d
MM_COULD_NOT_WRITE_FILE	../pure_c_spmm/mm_io.h	98;"	d
MM_DENSE_STR	../nlibs/mm_io.h	119;"	d
MM_DENSE_STR	../pure_c_spmm/mm_io.h	119;"	d
MM_GENERAL_STR	../nlibs/mm_io.h	125;"	d
MM_GENERAL_STR	../pure_c_spmm/mm_io.h	125;"	d
MM_HERM_STR	../nlibs/mm_io.h	127;"	d
MM_HERM_STR	../pure_c_spmm/mm_io.h	127;"	d
MM_INT_STR	../nlibs/mm_io.h	124;"	d
MM_INT_STR	../pure_c_spmm/mm_io.h	124;"	d
MM_IO_H	../nlibs/mm_io.h	10;"	d
MM_IO_H	../pure_c_spmm/mm_io.h	10;"	d
MM_LINE_TOO_LONG	../nlibs/mm_io.h	97;"	d
MM_LINE_TOO_LONG	../pure_c_spmm/mm_io.h	97;"	d
MM_MAX_LINE_LENGTH	../nlibs/mm_io.h	17;"	d
MM_MAX_LINE_LENGTH	../pure_c_spmm/mm_io.h	17;"	d
MM_MAX_TOKEN_LENGTH	../nlibs/mm_io.h	19;"	d
MM_MAX_TOKEN_LENGTH	../pure_c_spmm/mm_io.h	19;"	d
MM_MTX_STR	../nlibs/mm_io.h	117;"	d
MM_MTX_STR	../pure_c_spmm/mm_io.h	117;"	d
MM_NOT_MTX	../nlibs/mm_io.h	94;"	d
MM_NOT_MTX	../pure_c_spmm/mm_io.h	94;"	d
MM_NO_HEADER	../nlibs/mm_io.h	95;"	d
MM_NO_HEADER	../pure_c_spmm/mm_io.h	95;"	d
MM_PATTERN_STR	../nlibs/mm_io.h	129;"	d
MM_PATTERN_STR	../pure_c_spmm/mm_io.h	129;"	d
MM_PREMATURE_EOF	../nlibs/mm_io.h	93;"	d
MM_PREMATURE_EOF	../pure_c_spmm/mm_io.h	93;"	d
MM_REAL_STR	../nlibs/mm_io.h	123;"	d
MM_REAL_STR	../pure_c_spmm/mm_io.h	123;"	d
MM_SKEW_STR	../nlibs/mm_io.h	128;"	d
MM_SKEW_STR	../pure_c_spmm/mm_io.h	128;"	d
MM_SPARSE_STR	../nlibs/mm_io.h	121;"	d
MM_SPARSE_STR	../pure_c_spmm/mm_io.h	121;"	d
MM_SYMM_STR	../nlibs/mm_io.h	126;"	d
MM_SYMM_STR	../pure_c_spmm/mm_io.h	126;"	d
MM_UNSUPPORTED_TYPE	../nlibs/mm_io.h	96;"	d
MM_UNSUPPORTED_TYPE	../pure_c_spmm/mm_io.h	96;"	d
MM_typecode	../nlibs/mm_io.h	/^typedef char MM_typecode[4];$/;"	t
MM_typecode	../pure_c_spmm/mm_io.h	/^typedef char MM_typecode[4];$/;"	t
MTHRESH	../mlrmcl1.2/Lib/myqsort.c	77;"	d	file:
MatchTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
Match_HEM	../mlrmcl1.2/Lib/match.c	/^void Match_HEM(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
Match_HEM	../mlrmcl1.2/Lib/proto.h	/^void Match_HEM(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
Match_HEM	../mlrmcl1.2/Lib/rename.h	200;"	d
Match_RM	../mlrmcl1.2/Lib/match.c	/^void Match_RM(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
Match_RM	../mlrmcl1.2/Lib/proto.h	/^void Match_RM(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
Match_RM	../mlrmcl1.2/Lib/rename.h	198;"	d
Match_RM_NVW	../mlrmcl1.2/Lib/match.c	/^void Match_RM_NVW(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
Match_RM_NVW	../mlrmcl1.2/Lib/proto.h	/^void Match_RM_NVW(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
Match_RM_NVW	../mlrmcl1.2/Lib/rename.h	199;"	d
Match_SHEM	../mlrmcl1.2/Lib/match.c	/^void Match_SHEM(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
Match_SHEM	../mlrmcl1.2/Lib/proto.h	/^void Match_SHEM(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
Match_SHEM	../mlrmcl1.2/Lib/rename.h	201;"	d
Matrix	../mlrmcl1.2/Lib/struct.h	/^typedef struct matrixdef Matrix;$/;"	t	typeref:struct:matrixdef
MatrixMarketBanner	../nlibs/mm_io.h	18;"	d
MatrixMarketBanner	../pure_c_spmm/mm_io.h	18;"	d
McKMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	151;"	d
McKMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	154;"	d
McKMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	152;"	d
McKMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	153;"	d
McPMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	145;"	d
McPMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	148;"	d
McPMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	146;"	d
McPMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	147;"	d
MinCover	../mlrmcl1.2/Lib/rename.h	255;"	d
MinCover_Augment	../mlrmcl1.2/Lib/rename.h	256;"	d
MinCover_ColDFS	../mlrmcl1.2/Lib/rename.h	258;"	d
MinCover_Decompose	../mlrmcl1.2/Lib/rename.h	257;"	d
MinCover_RowDFS	../mlrmcl1.2/Lib/rename.h	259;"	d
MlevelEdgeBisection	../mlrmcl1.2/Lib/rename.h	368;"	d
MlevelKWayPartitioning	../mlrmcl1.2/Lib/rename.h	151;"	d
MlevelNestedDissection	../mlrmcl1.2/Lib/rename.h	353;"	d
MlevelNestedDissectionCC	../mlrmcl1.2/Lib/rename.h	354;"	d
MlevelNestedDissectionP	../mlrmcl1.2/Lib/rename.h	363;"	d
MlevelNodeBisection	../mlrmcl1.2/Lib/rename.h	356;"	d
MlevelNodeBisectionMultiple	../mlrmcl1.2/Lib/rename.h	355;"	d
MlevelRecursiveBisection	../mlrmcl1.2/Lib/rename.h	367;"	d
MlevelVolKWayPartitioning	../mlrmcl1.2/Lib/rename.h	155;"	d
MocAllocate2WayPartitionMemory	../mlrmcl1.2/Lib/rename.h	328;"	d
MocAllocateKWayPartitionMemory	../mlrmcl1.2/Lib/rename.h	295;"	d
MocBalance2Way	../mlrmcl1.2/Lib/rename.h	205;"	d
MocBalance2Way2	../mlrmcl1.2/Lib/rename.h	210;"	d
MocCompute2WayPartitionParams	../mlrmcl1.2/Lib/rename.h	329;"	d
MocComputeKWayBalanceBoundary	../mlrmcl1.2/Lib/rename.h	298;"	d
MocComputeKWayPartitionParams	../mlrmcl1.2/Lib/rename.h	296;"	d
MocFM_2WayEdgeRefine	../mlrmcl1.2/Lib/rename.h	241;"	d
MocFM_2WayEdgeRefine2	../mlrmcl1.2/Lib/rename.h	249;"	d
MocGeneral2WayBalance	../mlrmcl1.2/Lib/rename.h	206;"	d
MocGeneral2WayBalance2	../mlrmcl1.2/Lib/rename.h	211;"	d
MocGrowBisection	../mlrmcl1.2/Lib/rename.h	264;"	d
MocGrowBisection2	../mlrmcl1.2/Lib/rename.h	272;"	d
MocGrowBisectionNew2	../mlrmcl1.2/Lib/rename.h	273;"	d
MocInit2WayBalance	../mlrmcl1.2/Lib/rename.h	266;"	d
MocInit2WayBalance2	../mlrmcl1.2/Lib/rename.h	274;"	d
MocInit2WayPartition	../mlrmcl1.2/Lib/rename.h	263;"	d
MocInit2WayPartition2	../mlrmcl1.2/Lib/rename.h	271;"	d
MocIsHBalanced	../mlrmcl1.2/Lib/rename.h	288;"	d
MocProject2WayPartition	../mlrmcl1.2/Lib/rename.h	330;"	d
MocProjectKWayPartition	../mlrmcl1.2/Lib/rename.h	297;"	d
MocRandomBisection	../mlrmcl1.2/Lib/rename.h	265;"	d
MocRefine2Way	../mlrmcl1.2/Lib/rename.h	327;"	d
MocRefine2Way2	../mlrmcl1.2/Lib/rename.h	334;"	d
MocRefineKWayHorizontal	../mlrmcl1.2/Lib/rename.h	294;"	d
MoveGroup	../mlrmcl1.2/Lib/rename.h	428;"	d
MoveGroupMConn	../mlrmcl1.2/Lib/rename.h	426;"	d
N	../mlrmcl1.2/tools/evaluateClusters.py	/^N = float(args[5])$/;"	v
N	../mlrmcl1.2/tools/normMI.py	/^N = N_gt$/;"	v
NCUTOBJ	../mlrmcl1.2/Programs/Makefile	/^NCUTOBJ = ncut.o $/;"	m
NEG_GAINSPAN	../mlrmcl1.2/Lib/defs.h	82;"	d
NGR_PASSES	../mlrmcl1.2/Lib/defs.h	215;"	d
NLGR_PASSES	../mlrmcl1.2/Lib/defs.h	216;"	d
NORM_BC	../mlrmcl1.2/Lib/defs.h	104;"	d
NORM_CC	../mlrmcl1.2/Lib/defs.h	105;"	d
NRInfoType	../mlrmcl1.2/Lib/struct.h	/^typedef struct nrinfodef NRInfoType;$/;"	t	typeref:struct:nrinfodef
NRMCL	../makefile	/^NRMCL=$(LIBDIR)\/$(LIBNAME)$/;"	m
NRMCL	../tests/makefile	/^NRMCL=$(LIBDIR)\/$(LIBNAME)$/;"	m
NTIMER_H_	../nlibs/ntimer.h	2;"	d
NTIMER_H_	../pure_c_spmm/ntimer.h	2;"	d
N_cluster	../mlrmcl1.2/tools/normMI.py	/^		N_cluster = N_cluster+1$/;"	v
N_cluster	../mlrmcl1.2/tools/normMI.py	/^N_cluster = 0$/;"	v
N_gt	../mlrmcl1.2/tools/normMI.py	/^N_gt = float(len(gtAssignments))$/;"	v
NbinCoeffs	../mlrmcl1.2/tools/evaluateClusters.py	/^NbinCoeffs = {} $/;"	v
OBJS	../makefile	/^OBJS=$(shell echo $(SOURCES) | sed s\/.cc\/.o\/g)$/;"	m
OBJS	../mlrmcl1.2/Lib/Makefile	/^OBJS = coarsen.o match.o ccgraph.o memory.o \\$/;"	m
OBJS	../nlibs/Makefile	/^OBJS=$(shell echo $(SOURCES) | sed s\/.cc\/.o\/g)$/;"	m
OBJS	../pure_c_spmm/makefile	/^OBJS=$(shell echo $(SOURCES) | sed s\/.cc\/.o\/g)$/;"	m
OBJS	../tests/makefile	/^OBJS=$(shell echo $(SOURCES) | sed s\/.cc\/.o\/g)$/;"	m
OEMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	130;"	d
OEMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	133;"	d
OEMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	131;"	d
OEMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	132;"	d
OFLAG_CCMP	../mlrmcl1.2/Lib/defs.h	97;"	d
OFLAG_COMPRESS	../mlrmcl1.2/Lib/defs.h	96;"	d
ONMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	136;"	d
ONMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	139;"	d
ONMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	137;"	d
ONMETIS_NSEPS	../mlrmcl1.2/Lib/defs.h	142;"	d
ONMETIS_OFLAGS	../mlrmcl1.2/Lib/defs.h	140;"	d
ONMETIS_PFACTOR	../mlrmcl1.2/Lib/defs.h	141;"	d
ONMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	138;"	d
OPTION_CTYPE	../mlrmcl1.2/Lib/defs.h	88;"	d
OPTION_DBGLVL	../mlrmcl1.2/Lib/defs.h	91;"	d
OPTION_ITYPE	../mlrmcl1.2/Lib/defs.h	89;"	d
OPTION_NSEPS	../mlrmcl1.2/Lib/defs.h	94;"	d
OPTION_OFLAGS	../mlrmcl1.2/Lib/defs.h	92;"	d
OPTION_PFACTOR	../mlrmcl1.2/Lib/defs.h	93;"	d
OPTION_PTYPE	../mlrmcl1.2/Lib/defs.h	87;"	d
OPTION_RTYPE	../mlrmcl1.2/Lib/defs.h	90;"	d
OP_KMETIS	../mlrmcl1.2/Lib/defs.h	165;"	d
OP_KVMETIS	../mlrmcl1.2/Lib/defs.h	169;"	d
OP_OEMETIS	../mlrmcl1.2/Lib/defs.h	166;"	d
OP_ONMETIS	../mlrmcl1.2/Lib/defs.h	167;"	d
OP_ONWMETIS	../mlrmcl1.2/Lib/defs.h	168;"	d
OP_PMETIS	../mlrmcl1.2/Lib/defs.h	164;"	d
OR	../mlrmcl1.2/Lib/macros.h	92;"	d
ORDER_UNBALANCE_FRACTION	../mlrmcl1.2/Lib/defs.h	227;"	d
Options	../mlrmcl1.2/Lib/struct.h	/^typedef struct optionsdef Options;$/;"	t	typeref:struct:optionsdef
Overlap_ComputeNcutVector	../mlrmcl1.2/Lib/proto.h	/^float Overlap_ComputeNcutVector(GraphType*, idxtype*, idxtype*,$/;"	p	signature:(GraphType*, idxtype*, idxtype*, idxtype, float*)
PLUS_GAINSPAN	../mlrmcl1.2/Lib/defs.h	81;"	d
PMETIS_CTYPE	../mlrmcl1.2/Lib/defs.h	118;"	d
PMETIS_DBGLVL	../mlrmcl1.2/Lib/defs.h	121;"	d
PMETIS_ITYPE	../mlrmcl1.2/Lib/defs.h	119;"	d
PMETIS_RTYPE	../mlrmcl1.2/Lib/defs.h	120;"	d
PMPLUSPMT	../mlrmcl1.2/Lib/defs.h	108;"	d
PQueueDelete	../mlrmcl1.2/Lib/rename.h	378;"	d
PQueueFree	../mlrmcl1.2/Lib/rename.h	376;"	d
PQueueGetMax	../mlrmcl1.2/Lib/rename.h	381;"	d
PQueueInit	../mlrmcl1.2/Lib/rename.h	374;"	d
PQueueInsert	../mlrmcl1.2/Lib/rename.h	377;"	d
PQueueReset	../mlrmcl1.2/Lib/rename.h	375;"	d
PQueueSeeMax	../mlrmcl1.2/Lib/rename.h	382;"	d
PQueueType	../mlrmcl1.2/Lib/struct.h	/^struct PQueueType {$/;"	s
PQueueType	../mlrmcl1.2/Lib/struct.h	/^typedef struct PQueueType PQueueType;$/;"	t	typeref:struct:PQueueType
PQueueType::buckets	../mlrmcl1.2/Lib/struct.h	/^  ListNodeType **buckets;$/;"	m	struct:PQueueType	access:public
PQueueType::heap	../mlrmcl1.2/Lib/struct.h	/^  KeyValueType *heap;$/;"	m	struct:PQueueType	access:public
PQueueType::locator	../mlrmcl1.2/Lib/struct.h	/^  idxtype *locator;$/;"	m	struct:PQueueType	access:public
PQueueType::maxgain	../mlrmcl1.2/Lib/struct.h	/^  int maxgain;$/;"	m	struct:PQueueType	access:public
PQueueType::maxnodes	../mlrmcl1.2/Lib/struct.h	/^  int maxnodes;$/;"	m	struct:PQueueType	access:public
PQueueType::mustfree	../mlrmcl1.2/Lib/struct.h	/^  int mustfree;$/;"	m	struct:PQueueType	access:public
PQueueType::ngainspan	../mlrmcl1.2/Lib/struct.h	/^  int pgainspan, ngainspan;     \/* plus and negative gain span *\/$/;"	m	struct:PQueueType	access:public
PQueueType::nnodes	../mlrmcl1.2/Lib/struct.h	/^  int nnodes;$/;"	m	struct:PQueueType	access:public
PQueueType::nodes	../mlrmcl1.2/Lib/struct.h	/^  ListNodeType *nodes;$/;"	m	struct:PQueueType	access:public
PQueueType::pgainspan	../mlrmcl1.2/Lib/struct.h	/^  int pgainspan, ngainspan;     \/* plus and negative gain span *\/$/;"	m	struct:PQueueType	access:public
PQueueType::type	../mlrmcl1.2/Lib/struct.h	/^  int type;                     \/* The type of the representation used *\/$/;"	m	struct:PQueueType	access:public
PQueueUpdate	../mlrmcl1.2/Lib/rename.h	379;"	d
PQueueUpdateUp	../mlrmcl1.2/Lib/rename.h	380;"	d
PageRankOptions	../mlrmcl1.2/Lib/struct.h	/^typedef struct pagerankOptionsDef PageRankOptions;$/;"	t	typeref:struct:pagerankOptionsDef
ParallelQSort	../mlrmcl1.2/Lib/proto.h	/^void ParallelQSort(idxtype*,wgttype*,int,int);$/;"	p	signature:(idxtype*,wgttype*,int,int)
ParallelQSort	../mlrmcl1.2/Lib/util.c	/^void ParallelQSort(idxtype *a, wgttype *b, int start, int end)$/;"	f	signature:(idxtype *a, wgttype *b, int start, int end)
ParallelQSortFloatsInts	../mlrmcl1.2/Lib/proto.h	/^void ParallelQSortFloatsInts(wgttype*, idxtype*, int, int);$/;"	p	signature:(wgttype*, idxtype*, int, int)
ParallelQSortFloatsInts	../mlrmcl1.2/Lib/util.c	/^void ParallelQSortFloatsInts(wgttype *a, idxtype *b, int start,$/;"	f	signature:(wgttype *a, idxtype *b, int start, int end)
ParallelQSortInts	../mlrmcl1.2/Lib/proto.h	/^void ParallelQSortInts(idxtype*,idxtype*,int,int);$/;"	p	signature:(idxtype*,idxtype*,int,int)
ParallelQSortInts	../mlrmcl1.2/Lib/util.c	/^void ParallelQSortInts(idxtype *a, idxtype *b, int start, int end)$/;"	f	signature:(idxtype *a, idxtype *b, int start, int end)
ParallelQSortIntsUsingScores	../mlrmcl1.2/Lib/proto.h	/^void ParallelQSortIntsUsingScores(idxtype*, idxtype*, idxtype*,$/;"	p	signature:(idxtype*, idxtype*, idxtype*, int, int)
ParallelQSortIntsUsingScores	../mlrmcl1.2/Lib/util.c	/^void ParallelQSortIntsUsingScores(idxtype *a, idxtype *b, idxtype$/;"	f	signature:(idxtype *a, idxtype *b, idxtype *scores, int start, int end)
ParallelQSortLongs	../mlrmcl1.2/Lib/proto.h	/^void ParallelQSortLongs(long*,wgttype*,int,int);$/;"	p	signature:(long*,wgttype*,int,int)
ParallelQSortLongs	../mlrmcl1.2/Lib/util.c	/^void ParallelQSortLongs(long *a, wgttype *b, int start, int end)$/;"	f	signature:(long *a, wgttype *b, int start, int end)
ParallelRandomPartition	../mlrmcl1.2/Lib/util.c	/^int ParallelRandomPartition(idxtype* a, wgttype* b, int start,$/;"	f	signature:(idxtype* a, wgttype* b, int start, int end)
ParallelRandomPartitionFloatsInts	../mlrmcl1.2/Lib/util.c	/^int ParallelRandomPartitionFloatsInts(wgttype* a, idxtype* b, int start,$/;"	f	signature:(wgttype* a, idxtype* b, int start, int end)
ParallelRandomPartitionInts	../mlrmcl1.2/Lib/util.c	/^int ParallelRandomPartitionInts(idxtype* a, idxtype* b, int start,$/;"	f	signature:(idxtype* a, idxtype* b, int start, int end)
ParallelRandomPartitionIntsUsingScores	../mlrmcl1.2/Lib/util.c	/^int ParallelRandomPartitionIntsUsingScores(idxtype* a, idxtype*$/;"	f	signature:(idxtype* a, idxtype* b, idxtype *scores, int start, int end)
ParallelRandomPartitionLongs	../mlrmcl1.2/Lib/util.c	/^int ParallelRandomPartitionLongs(long* a, wgttype* b, int start,$/;"	f	signature:(long* a, wgttype* b, int start, int end)
PrintSubDomainGraph	../mlrmcl1.2/Lib/rename.h	423;"	d
PrintTimers	../mlrmcl1.2/Lib/proto.h	/^void PrintTimers(CtrlType *);$/;"	p	signature:(CtrlType *)
PrintTimers	../mlrmcl1.2/Lib/rename.h	433;"	d
PrintTimers	../mlrmcl1.2/Lib/util.c	/^void PrintTimers(CtrlType *ctrl)$/;"	f	signature:(CtrlType *ctrl)
Project2WayNodePartition	../mlrmcl1.2/Lib/rename.h	411;"	d
Project2WayPartition	../mlrmcl1.2/Lib/rename.h	390;"	d
ProjectKWayPartition	../mlrmcl1.2/Lib/rename.h	168;"	d
ProjectTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
ProjectVolKWayPartition	../mlrmcl1.2/Lib/rename.h	192;"	d
PruneGraph	../mlrmcl1.2/Lib/rename.h	98;"	d
QSortIntsUsingInts	../mlrmcl1.2/Lib/proto.h	/^void QSortIntsUsingInts(idxtype*, idxtype*, int, int);$/;"	p	signature:(idxtype*, idxtype*, int, int)
QSortIntsUsingInts	../mlrmcl1.2/Lib/util.c	/^void QSortIntsUsingInts(idxtype *a, idxtype *scores, int start,$/;"	f	signature:(idxtype *a, idxtype *scores, int start, int end)
RInfoType	../mlrmcl1.2/Lib/struct.h	/^typedef struct rinfodef RInfoType;$/;"	t	typeref:struct:rinfodef
RMCL	../nrmcl.cc	/^void RMCL(const char iname[]) {$/;"	f	signature:(const char iname[])
RMCLOBJ	../mlrmcl1.2/Programs/Makefile	/^RMCLOBJ = nrmcl.o$/;"	m
RTYPE_FM	../mlrmcl1.2/Lib/defs.h	193;"	d
RTYPE_KWAYGREEDY	../mlrmcl1.2/Lib/defs.h	200;"	d
RTYPE_KWAYRANDOM	../mlrmcl1.2/Lib/defs.h	199;"	d
RTYPE_KWAYRANDOM_MCONN	../mlrmcl1.2/Lib/defs.h	201;"	d
RTYPE_SEP1SIDED	../mlrmcl1.2/Lib/defs.h	205;"	d
RTYPE_SEP2SIDED	../mlrmcl1.2/Lib/defs.h	204;"	d
RType	../mlrmcl1.2/Lib/struct.h	/^  int RType;			\/* The type of refinement *\/$/;"	m	struct:controldef	access:public
RandomBisection	../mlrmcl1.2/Lib/rename.h	147;"	d
RandomInRange	../mlrmcl1.2/Lib/macros.h	79;"	d
RandomInRange	../mlrmcl1.2/Lib/macros.h	82;"	d
RandomInRangeFast	../mlrmcl1.2/Lib/macros.h	80;"	d
RandomInRangeFast	../mlrmcl1.2/Lib/macros.h	83;"	d
RandomPartition	../mlrmcl1.2/Lib/util.c	/^int RandomPartition(wgttype* a, int start, int end)$/;"	f	signature:(wgttype* a, int start, int end)
RandomPartitionInts	../mlrmcl1.2/Lib/util.c	/^int RandomPartitionInts(idxtype* a, int start, int end)$/;"	f	signature:(idxtype* a, int start, int end)
RandomPartitionIntsUsingInts	../mlrmcl1.2/Lib/util.c	/^int RandomPartitionIntsUsingInts(idxtype* a, const idxtype *scores,$/;"	f	signature:(idxtype* a, const idxtype *scores, int start, int end)
RandomPermute	../mlrmcl1.2/Lib/proto.h	/^void RandomPermute(int, idxtype *, int);$/;"	p	signature:(int, idxtype *, int)
RandomPermute	../mlrmcl1.2/Lib/rename.h	469;"	d
RandomPermute	../mlrmcl1.2/Lib/util.c	/^void RandomPermute(int n, idxtype *p, int flag)$/;"	f	signature:(int n, idxtype *p, int flag)
RandomPermuteWgttype	../mlrmcl1.2/Lib/util.c	/^void RandomPermuteWgttype(int n, wgttype *p, int flag)$/;"	f	signature:(int n, wgttype *p, int flag)
RandomSelect	../mlrmcl1.2/Lib/proto.h	/^wgttype RandomSelect(wgttype*, int, int, int);$/;"	p	signature:(wgttype*, int, int, int)
RandomSelect	../mlrmcl1.2/Lib/util.c	/^wgttype RandomSelect(wgttype *a, int start, int end, int i)$/;"	f	signature:(wgttype *a, int start, int end, int i)
RandomSelectInts	../mlrmcl1.2/Lib/proto.h	/^idxtype RandomSelectInts(idxtype*, int, int, int);$/;"	p	signature:(idxtype*, int, int, int)
RandomSelectInts	../mlrmcl1.2/Lib/util.c	/^idxtype RandomSelectInts(idxtype *a, int start, int end, int i)$/;"	f	signature:(idxtype *a, int start, int end, int i)
Random_KWayEdgeRefine	../mlrmcl1.2/Lib/rename.h	159;"	d
Random_KWayEdgeRefineMConn	../mlrmcl1.2/Lib/rename.h	421;"	d
Random_KWayVolRefine	../mlrmcl1.2/Lib/rename.h	175;"	d
Random_KWayVolRefineMConn	../mlrmcl1.2/Lib/rename.h	176;"	d
RandomizeGraph	../mlrmcl1.2/Lib/rename.h	135;"	d
ReAdjustMemory	../mlrmcl1.2/Lib/ccgraph.c	/^void ReAdjustMemory(GraphType *graph, GraphType *cgraph, int dovsize) $/;"	f	signature:(GraphType *graph, GraphType *cgraph, int dovsize)
ReAdjustMemory	../mlrmcl1.2/Lib/proto.h	/^void ReAdjustMemory(GraphType *, GraphType *, int);$/;"	p	signature:(GraphType *, GraphType *, int)
ReAdjustMemory	../mlrmcl1.2/Lib/rename.h	89;"	d
ReadGraph	../mlrmcl1.2/Lib/io.c	/^void ReadGraph(GraphType *graph, const char *filename, int *wgtflag,$/;"	f	signature:(GraphType *graph, const char *filename, int *wgtflag, int addSelfLoop, int txtFormat)
ReadGraph	../mlrmcl1.2/Lib/proto.h	/^void ReadGraph(GraphType *, const char *, int *, int, int);$/;"	p	signature:(GraphType *, const char *, int *, int, int)
ReadMatrix	../mlrmcl1.2/Lib/io.c	/^void ReadMatrix(Matrix *m, char *filename, wgttype threshold)$/;"	f	signature:(Matrix *m, char *filename, wgttype threshold)
ReadMatrix	../mlrmcl1.2/Lib/proto.h	/^void ReadMatrix(Matrix *, char*, wgttype threshold=0);$/;"	p	signature:(Matrix *, char*, wgttype threshold=0)
ReadMesh	../mlrmcl1.2/Lib/io.c	/^idxtype *ReadMesh(const char *filename, int *ne, int *nn, int *etype)$/;"	f	signature:(const char *filename, int *ne, int *nn, int *etype)
ReadMesh	../mlrmcl1.2/Lib/proto.h	/^idxtype *ReadMesh(const char *, int *, int *, int *);$/;"	p	signature:(const char *, int *, int *, int *)
RefTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
Refine2Way	../mlrmcl1.2/Lib/rename.h	387;"	d
Refine2WayNode	../mlrmcl1.2/Lib/rename.h	408;"	d
RefineKWay	../mlrmcl1.2/Lib/rename.h	165;"	d
RefineVolKWay	../mlrmcl1.2/Lib/rename.h	188;"	d
SMALLNIPARTS	../mlrmcl1.2/Lib/defs.h	219;"	d
SOURCES	../makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	../nlibs/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	../pure_c_spmm/makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	../tests/makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SWAP	../mlrmcl1.2/Lib/macros.h	95;"	d
SelectQueue	../mlrmcl1.2/Lib/rename.h	242;"	d
SelectQueue2	../mlrmcl1.2/Lib/rename.h	250;"	d
SelectQueue3	../mlrmcl1.2/Lib/rename.h	212;"	d
SelectQueueOneWay2	../mlrmcl1.2/Lib/rename.h	275;"	d
SelectQueueoneWay	../mlrmcl1.2/Lib/rename.h	267;"	d
SepTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
SetUpCoarseGraph	../mlrmcl1.2/Lib/ccgraph.c	/^GraphType *SetUpCoarseGraph(GraphType *graph, int cnvtxs, int dovsize)$/;"	f	signature:(GraphType *graph, int cnvtxs, int dovsize)
SetUpCoarseGraph	../mlrmcl1.2/Lib/proto.h	/^GraphType *SetUpCoarseGraph(GraphType *, int, int);$/;"	p	signature:(GraphType *, int, int)
SetUpCoarseGraph	../mlrmcl1.2/Lib/rename.h	88;"	d
SetUpGraph	../mlrmcl1.2/Lib/rename.h	131;"	d
SetUpGraph2	../mlrmcl1.2/Lib/rename.h	133;"	d
SetUpGraphKway	../mlrmcl1.2/Lib/rename.h	132;"	d
SetUpSplitGraph	../mlrmcl1.2/Lib/rename.h	370;"	d
SplitGraphOrder	../mlrmcl1.2/Lib/rename.h	357;"	d
SplitGraphOrderCC	../mlrmcl1.2/Lib/rename.h	359;"	d
SplitGraphPart	../mlrmcl1.2/Lib/rename.h	369;"	d
SplitTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
TETDUALMETIS	../mlrmcl1.2/Lib/rename.h	233;"	d
TETNODALMETIS	../mlrmcl1.2/Lib/rename.h	236;"	d
THRESH	../mlrmcl1.2/Lib/myqsort.c	76;"	d	file:
TIME_SIZE	../nlibs/mm_io.cc	820;"	d	file:
TIME_SIZE	../nlibs/mm_io.cc	835;"	d	file:
TIME_SIZE	../pure_c_spmm/mm_io.cc	820;"	d	file:
TIME_SIZE	../pure_c_spmm/mm_io.cc	835;"	d	file:
TRIDUALMETIS	../mlrmcl1.2/Lib/rename.h	232;"	d
TRINODALMETIS	../mlrmcl1.2/Lib/rename.h	235;"	d
TotalTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
UInt32	../mlrmcl1.2/Lib/struct.h	/^typedef unsigned int UInt32;$/;"	t
UNBALANCE_FRACTION	../mlrmcl1.2/Lib/defs.h	223;"	d
UNMATCHED	../mlrmcl1.2/Lib/defs.h	211;"	d
UTIL_H_	../nlibs/util.h	2;"	d
UncoarsenTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
VEDegreeType	../mlrmcl1.2/Lib/struct.h	/^typedef struct vedegreedef VEDegreeType;$/;"	t	typeref:struct:vedegreedef
VPInfoType	../mlrmcl1.2/Lib/struct.h	/^typedef struct vpwgtdef VPInfoType;$/;"	t	typeref:struct:vpwgtdef
VRInfoType	../mlrmcl1.2/Lib/struct.h	/^typedef struct vrinfodef VRInfoType;$/;"	t	typeref:struct:vrinfodef
VolSetUpGraph	../mlrmcl1.2/Lib/rename.h	134;"	d
WGTTYPE_FLOAT	../mlrmcl1.2/Lib/struct.h	86;"	d
WorkSpaceType	../mlrmcl1.2/Lib/struct.h	/^typedef struct workspacedef WorkSpaceType;$/;"	t	typeref:struct:workspacedef
WriteGraph	../mlrmcl1.2/Lib/io.c	/^void WriteGraph(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy)$/;"	f	signature:(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy)
WriteGraph	../mlrmcl1.2/Lib/proto.h	/^void WriteGraph(const char *, int, idxtype *, idxtype *);$/;"	p	signature:(const char *, int, idxtype *, idxtype *)
WriteGraphWithWts	../mlrmcl1.2/Lib/io.c	/^void WriteGraphWithWts(const char *filename, int nvtxs, idxtype *xadj,$/;"	f	signature:(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy, idxtype *adjwgt)
WriteGraphWithWts	../mlrmcl1.2/Lib/proto.h	/^void WriteGraphWithWts(const char *, int, idxtype*, idxtype*,$/;"	p	signature:(const char *, int, idxtype*, idxtype*, idxtype*)
WriteMappedTxtGraphWithWts	../mlrmcl1.2/Lib/io.c	/^void WriteMappedTxtGraphWithWts(const char *filename, int fullNvtxs,$/;"	f	signature:(const char *filename, int fullNvtxs, idxtype *xadj, idxtype *adjncy, idxtype *adjwgt, idxtype* map, int mappedNvtxs)
WriteMappedTxtGraphWithWts	../mlrmcl1.2/Lib/proto.h	/^void WriteMappedTxtGraphWithWts(const char *, int,$/;"	p	signature:(const char *, int, idxtype*,idxtype*,idxtype*,idxtype*, int)
WriteMatrix	../mlrmcl1.2/Lib/io.c	/^void WriteMatrix(const char *filename, int nvtxs, idxtype *xadj,$/;"	f	signature:(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy, wgttype *adjwgt)
WriteMatrix	../mlrmcl1.2/Lib/proto.h	/^void WriteMatrix(const char *, int, idxtype*, idxtype*, wgttype*);$/;"	p	signature:(const char *, int, idxtype*, idxtype*, wgttype*)
WriteMeshPartition	../mlrmcl1.2/Lib/io.c	/^void WriteMeshPartition(const char *fname, int nparts, int ne, idxtype *epart, int nn, idxtype *npart)$/;"	f	signature:(const char *fname, int nparts, int ne, idxtype *epart, int nn, idxtype *npart)
WriteMeshPartition	../mlrmcl1.2/Lib/proto.h	/^void WriteMeshPartition(const char *, int, int, idxtype *, int, idxtype *);$/;"	p	signature:(const char *, int, int, idxtype *, int, idxtype *)
WriteMocGraph	../mlrmcl1.2/Lib/io.c	/^void WriteMocGraph(GraphType *graph)$/;"	f	signature:(GraphType *graph)
WritePartition	../mlrmcl1.2/Lib/io.c	/^void WritePartition(const char *fname, idxtype *part, int n, int nparts)$/;"	f	signature:(const char *fname, idxtype *part, int n, int nparts)
WritePartition	../mlrmcl1.2/Lib/proto.h	/^void WritePartition(const char *, idxtype *, int, int);$/;"	p	signature:(const char *, idxtype *, int, int)
WritePermutation	../mlrmcl1.2/Lib/io.c	/^void WritePermutation(const char *fname, idxtype *iperm, int n)$/;"	f	signature:(const char *fname, idxtype *iperm, int n)
WritePermutation	../mlrmcl1.2/Lib/proto.h	/^void WritePermutation(const char *, idxtype *, int);$/;"	p	signature:(const char *, idxtype *, int)
WriteRMap	../mlrmcl1.2/Lib/io.c	/^void WriteRMap(const char *fname, idxtype *map, int n)$/;"	f	signature:(const char *fname, idxtype *map, int n)
WriteRMap	../mlrmcl1.2/Lib/proto.h	/^void WriteRMap(const char*, idxtype*, int);$/;"	p	signature:(const char*, idxtype*, int)
WriteTxtGraph	../mlrmcl1.2/Lib/io.c	/^void WriteTxtGraph(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy)$/;"	f	signature:(const char *filename, int nvtxs, idxtype *xadj, idxtype *adjncy)
WriteTxtGraph	../mlrmcl1.2/Lib/proto.h	/^void WriteTxtGraph(const char *, int, idxtype *, idxtype *);$/;"	p	signature:(const char *, int, idxtype *, idxtype *)
WspaceAvail	../mlrmcl1.2/Lib/memory.c	/^int WspaceAvail(CtrlType *ctrl)$/;"	f	signature:(CtrlType *ctrl)
WspaceAvail	../mlrmcl1.2/Lib/proto.h	/^int WspaceAvail(CtrlType *);$/;"	p	signature:(CtrlType *)
WspaceAvail	../mlrmcl1.2/Lib/rename.h	222;"	d
XOR	../mlrmcl1.2/Lib/macros.h	93;"	d
actualNumOutClusters	../mlrmcl1.2/tools/evaluateClusters.py	/^		actualNumOutClusters = actualNumOutClusters + 1$/;"	v
actualNumOutClusters	../mlrmcl1.2/tools/evaluateClusters.py	/^actualNumOutClusters = 0$/;"	v
add	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* add(Matrix* M0, Matrix* M1)$/;"	f	signature:(Matrix* M0, Matrix* M1)
add	../mlrmcl1.2/Lib/proto.h	/^Matrix* add(Matrix*, Matrix*);$/;"	p	signature:(Matrix*, Matrix*)
addInLinks	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	addInLinks = False$/;"	v
addInLinks	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	addInLinks = True$/;"	v
addInLinks	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^addInLinks = 0$/;"	v
addSelfLoopIfNeeded	../nlibs/COO.cc	/^void COO::addSelfLoopIfNeeded() {$/;"	f	class:COO	signature:()
addSelfLoopIfNeeded	../nlibs/COO.h	/^  void addSelfLoopIfNeeded();$/;"	p	class:COO	access:public	signature:()
addSelfLoops	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* addSelfLoops(Matrix* M)$/;"	f	signature:(Matrix* M)
addToList	../mlrmcl1.2/Lib/merge.c	/^void addToList(ListInt *l, int a)$/;"	f	signature:(ListInt *l, int a)
addToList	../mlrmcl1.2/Lib/merge.c	/^void addToList(ListWgt *l, int a)$/;"	f	signature:(ListWgt *l, int a)
adjListMap	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^adjListMap = {}$/;"	v
adjLists	../mlrmcl1.2/Lib/struct.h	/^	ListInt* adjLists;$/;"	m	struct:listgraphdef	access:public
adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype* adjncy;$/;"	m	struct:matrixdef	access:public
adjncy	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjncy;		\/* Array that stores the adjacency lists of nvtxs *\/$/;"	m	struct:graphdef	access:public
adjwgt	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
adjwgt	../mlrmcl1.2/Lib/struct.h	/^	wgttype* adjwgt; \/* array that stores weights of the$/;"	m	struct:matrixdef	access:public
adjwgt	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjwgt;		\/* Array that stores the weights of the adjacency lists *\/$/;"	m	struct:graphdef	access:public
adjwgtsum	../mlrmcl1.2/Lib/struct.h	/^	wgttype* adjwgtsum; \/* sum of adjacency weights of each node,$/;"	m	struct:matrixdef	access:public
adjwgtsum	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjwgtsum;		\/* The sum of the adjacency weight of each vertex *\/$/;"	m	struct:graphdef	access:public
ahkEdges	../mlrmcl1.2/Lib/proto.h	/^double ahkEdges(GraphType*, float);$/;"	p	signature:(GraphType*, float)
allInOneStep	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* allInOneStep(Matrix* flows, Matrix* input_adj, idxtype*$/;"	f	signature:(Matrix* flows, Matrix* input_adj, idxtype* hashtable, Options opt,int sortLists, int dprPhase)
allInOneStep	../mlrmcl1.2/Lib/proto.h	/^Matrix* allInOneStep(Matrix*, Matrix*, idxtype*,Options ,int, int);$/;"	p	signature:(Matrix*, Matrix*, idxtype*,Options ,int, int)
allocListGraph	../mlrmcl1.2/Lib/merge.c	/^ListGraph* allocListGraph(int nvtxs, int wgtflag, int$/;"	f	signature:(int nvtxs, int wgtflag, int initAdjSize, int increment)
allocListInt	../mlrmcl1.2/Lib/merge.c	/^void allocListInt(ListInt *l, int initSize, int increment)$/;"	f	signature:(ListInt *l, int initSize, int increment)
allocListWgt	../mlrmcl1.2/Lib/merge.c	/^void allocListWgt(ListWgt *l, int initSize, int increment)$/;"	f	signature:(ListWgt *l, int initSize, int increment)
allocMatrix	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* allocMatrix(int nvtxs, int nedges, int allocSum, int$/;"	f	signature:(int nvtxs, int nedges, int allocSum, int allocMax, int allocAttractor)
allocMatrix	../mlrmcl1.2/Lib/proto.h	/^Matrix* allocMatrix(int, int, int, int, int);$/;"	p	signature:(int, int, int, int, int)
allocSize	../mlrmcl1.2/Lib/struct.h	/^	int allocSize;$/;"	m	struct:intlistdef	access:public
allocSize	../mlrmcl1.2/Lib/struct.h	/^	int allocSize;$/;"	m	struct:wgtlistdef	access:public
allocateThreadDatas	../nlibs/cpu_csr_kernel.h	/^thread_data_t* allocateThreadDatas(int nthreads, int n);$/;"	p	signature:(int nthreads, int n)
allocateThreadDatas	../nlibs/omp_csr_kernel.cc	/^thread_data_t* allocateThreadDatas(int nthreads, int n) {$/;"	f	signature:(int nthreads, int n)
allocateThreadDatas	../pure_c_spmm/cpu_csr_kernel.h	/^thread_data_t* allocateThreadDatas(int nthreads, int n);$/;"	p	signature:(int nthreads, int n)
allocateThreadDatas	../pure_c_spmm/omp_csr_kernel.cc	/^thread_data_t* allocateThreadDatas(int nthreads, int n) {$/;"	f	signature:(int nthreads, int n)
allocateThreadDatas	../pure_c_spmm/save/omp_csr_kernel.cc	/^thread_data_t* allocateThreadDatas(int nthreads, int n) {$/;"	f	signature:(int nthreads, int n)
alpha	../mlrmcl1.2/Lib/struct.h	/^	wgttype alpha; \/\/ random jump probability.$/;"	m	struct:pagerankOptionsDef	access:public
amax	../mlrmcl1.2/Lib/macros.h	88;"	d
amin	../mlrmcl1.2/Lib/macros.h	89;"	d
args	../mlrmcl1.2/tools/convertToClusterLists.py	/^	args = sys.argv$/;"	v
args	../mlrmcl1.2/tools/evaluateClusters.py	/^args = sys.argv$/;"	v
args	../mlrmcl1.2/tools/normMI.py	/^args = sys.argv$/;"	v
args	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^args=sys.argv$/;"	v
arrayInflationR2	../nlibs/util.cc	/^void arrayInflationR2(const double ivalues[], const int count, double ovalues[]) {$/;"	f	signature:(const double ivalues[], const int count, double ovalues[])
arrayInflationR2	../nlibs/util.h	/^void arrayInflationR2(const double ivalues[], const int count, double ovalues[]);$/;"	p	signature:(const double ivalues[], const int count, double ovalues[])
arrayInflationR2Test	../tests/util_test.cc	/^void arrayInflationR2Test() {$/;"	f	signature:()
arrayMax	../nlibs/util.cc	/^double arrayMax(const double values[], const int count) {$/;"	f	signature:(const double values[], const int count)
arrayMax	../nlibs/util.h	/^double arrayMax(const double values[], const int count);$/;"	p	signature:(const double values[], const int count)
arrayMaxTest	../tests/util_test.cc	/^void arrayMaxTest() {$/;"	f	signature:()
arraySum	../nlibs/util.cc	/^double arraySum(const double values[], const int count) {$/;"	f	signature:(const double values[], const int count)
arraySum	../nlibs/util.h	/^double arraySum(const double values[], const int count);$/;"	p	signature:(const double values[], const int count)
arraySumTest	../tests/util_test.cc	/^void arraySumTest() {$/;"	f	signature:()
arrayThreshPrune	../nlibs/util.cc	/^double arrayThreshPrune(const double thresh, int* count, int indices[], double values[]) {$/;"	f	signature:(const double thresh, int* count, int indices[], double values[])
arrayThreshPrune	../nlibs/util.h	/^double arrayThreshPrune(const double thresh, int* count, int indices[], double values[]);$/;"	p	signature:(const double thresh, int* count, int indices[], double values[])
arrayThreshPruneTest	../tests/util_test.cc	/^void arrayThreshPruneTest() {$/;"	f	signature:()
assignClustersToHubs	../mlrmcl1.2/Lib/proto.h	/^void assignClustersToHubs(idxtype*, idxtype*, int, int,$/;"	p	signature:(idxtype*, idxtype*, int, int, GraphType*)
assignClustersToHubs	../mlrmcl1.2/Lib/util.c	/^void assignClustersToHubs(idxtype* indices, idxtype* map, int n,$/;"	f	signature:(idxtype* indices, idxtype* map, int n, int npart, GraphType* graph)
attractors	../mlrmcl1.2/Lib/struct.h	/^	idxtype* attractors; \/* the row with the maximum weight in a$/;"	m	struct:matrixdef	access:public
auxcore	../mlrmcl1.2/Lib/struct.h	/^  idxtype *auxcore;			\/* This points to the memory of the edegrees *\/$/;"	m	struct:workspacedef	access:public
averAndNormRowValue	../nlibs/CSR.cc	/^void CSR::averAndNormRowValue() {$/;"	f	class:CSR	signature:()
averAndNormRowValue	../nlibs/CSR.h	/^  void averAndNormRowValue();$/;"	p	struct:CSR	access:public	signature:()
bcWeight	../mlrmcl1.2/Lib/struct.h	/^	wgttype bcWeight;$/;"	m	struct:dirToUndirOptionsDef	access:public
bestPvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^bestPvalue = 0$/;"	v
bestf	../mlrmcl1.2/tools/evaluateClusters.py	/^					bestf = fmeasure$/;"	v
bestf	../mlrmcl1.2/tools/evaluateClusters.py	/^				bestf = fmeasure$/;"	v
bestf	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestf = float(0)$/;"	v
bestf_gtClusterId	../mlrmcl1.2/tools/evaluateClusters.py	/^					bestf_gtClusterId = gtCluster$/;"	v
bestf_gtClusterId	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestf_gtClusterId = -1$/;"	v
bestp	../mlrmcl1.2/tools/evaluateClusters.py	/^					bestp = prec$/;"	v
bestp	../mlrmcl1.2/tools/evaluateClusters.py	/^				bestp = prec$/;"	v
bestp	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestp = float(0)$/;"	v
bestpvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^				bestpvalue = pvalue$/;"	v
bestpvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestpvalue = float(0)$/;"	v
bestpvalue_gtClusterId	../mlrmcl1.2/tools/evaluateClusters.py	/^				bestpvalue_gtClusterId = gtCluster$/;"	v
bestpvalue_gtClusterId	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestpvalue_gtClusterId = -1$/;"	v
bestr	../mlrmcl1.2/tools/evaluateClusters.py	/^					bestr = rec$/;"	v
bestr	../mlrmcl1.2/tools/evaluateClusters.py	/^				bestr = rec$/;"	v
bestr	../mlrmcl1.2/tools/evaluateClusters.py	/^	bestr = float(0)$/;"	v
blockSize	../mlrmcl1.2/Lib/struct.h	/^	int blockSize;$/;"	m	struct:dirToUndirOptionsDef	access:public
bndind	../mlrmcl1.2/Lib/struct.h	/^  idxtype *bndptr, *bndind;$/;"	m	struct:graphdef	access:public
bndptr	../mlrmcl1.2/Lib/struct.h	/^  idxtype *bndptr, *bndind;$/;"	m	struct:graphdef	access:public
bsearch_insertPos	../mlrmcl1.2/Lib/proto.h	/^int bsearch_insertPos(idxtype*, int, int, int);$/;"	p	signature:(idxtype*, int, int, int)
bsearch_insertPos	../mlrmcl1.2/Lib/util.c	/^int bsearch_insertPos(idxtype *a, idxtype key, int start, int end)$/;"	f	signature:(idxtype *a, idxtype key, int start, int end)
buckets	../mlrmcl1.2/Lib/struct.h	/^  ListNodeType **buckets;$/;"	m	struct:PQueueType	access:public
cCount	../mlrmcl1.2/tools/normMI.py	/^	cCount = float(cCount)$/;"	v
cRowiCount	../nlibs/omp_csr_kernel.cc	/^int cRowiCount(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[]) {$/;"	f	signature:(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[])
cRowiCount	../pure_c_spmm/omp_csr_kernel.cc	/^int cRowiCount(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[]) {$/;"	f	signature:(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[])
cRowiCount	../pure_c_spmm/save/omp_csr_kernel.cc	/^int cRowiCount(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[]) {$/;"	f	signature:(const int i, const int IA[], const int JA[], const int IB[], const int JB[], int iJC[], bool xb[])
calculateMaxAndSum	../mlrmcl1.2/Lib/mclbase.c	/^void calculateMaxAndSum(Matrix* a)$/;"	f	signature:(Matrix* a)
cass	../mlrmcl1.2/tools/normMI.py	/^		cass = int(t[0])$/;"	v
cass	../mlrmcl1.2/tools/normMI.py	/^		cass = int(t[1])$/;"	v
ccore	../mlrmcl1.2/Lib/struct.h	/^  int maxcore, ccore;$/;"	m	struct:workspacedef	access:public
cdegree	../mlrmcl1.2/Lib/struct.h	/^  int cdegree;$/;"	m	struct:workspacedef	access:public
changeAdjMatrix	../mlrmcl1.2/Lib/rmcl.c	/^Matrix* changeAdjMatrix(Matrix* flows, Matrix* adj, idxtype*$/;"	f	signature:(Matrix* flows, Matrix* adj, idxtype* hashtable)
changeBetweenMatrices	../mlrmcl1.2/Lib/mclbase.c	/^void changeBetweenMatrices(Matrix* M0, Matrix* M1, wgttype* c)$/;"	f	signature:(Matrix* M0, Matrix* M1, wgttype* c)
changeBetweenMatrices	../mlrmcl1.2/Lib/proto.h	/^void changeBetweenMatrices(Matrix*,Matrix*,wgttype*);$/;"	p	signature:(Matrix*,Matrix*,wgttype*)
changeBetweenMatrices2	../mlrmcl1.2/Lib/proto.h	/^void changeBetweenMatrices2(Matrix*,Matrix*,wgttype*);$/;"	p	signature:(Matrix*,Matrix*,wgttype*)
charsum	../mlrmcl1.2/Lib/proto.h	/^int charsum(int, const char *);$/;"	p	signature:(int, const char *)
charsum	../mlrmcl1.2/Lib/rename.h	461;"	d
charsum	../mlrmcl1.2/Lib/util.c	/^int charsum(int n, const char *x)$/;"	f	signature:(int n, const char *x)
checkEqualityOfGraphs	../mlrmcl1.2/Lib/proto.h	/^int checkEqualityOfGraphs(GraphType*);$/;"	p	signature:(GraphType*)
checkValidUndirectedGraph	../mlrmcl1.2/Lib/proto.h	/^int checkValidUndirectedGraph(GraphType*);$/;"	p	signature:(GraphType*)
checksums	../mlrmcl1.2/Lib/mclbase.c	/^void checksums(Matrix* M)$/;"	f	signature:(Matrix* M)
checksums	../mlrmcl1.2/Lib/proto.h	/^void checksums(Matrix*);$/;"	p	signature:(Matrix*)
cleartimer	../mlrmcl1.2/Lib/macros.h	111;"	d
cluster	../mlrmcl1.2/tools/evaluateClusters.py	/^	cluster = outClusters[clusterId]$/;"	v
clusterCount	../mlrmcl1.2/tools/normMI.py	/^		clusterCount = float(clusterCounts[cluster])$/;"	v
clusterCounts	../mlrmcl1.2/tools/normMI.py	/^clusterCounts = []$/;"	v
clusterId	../mlrmcl1.2/tools/evaluateClusters.py	/^	clusterId = int(tokens[1])$/;"	v
clusterMap	../mlrmcl1.2/tools/normMI.py	/^clusterMap = {}$/;"	v
clusters	../mlrmcl1.2/tools/convertToClusterLists.py	/^	clusters = convertmetisoutput(args[1])$/;"	v
cmap	../mlrmcl1.2/Lib/struct.h	/^  idxtype *cmap;$/;"	m	struct:graphdef	access:public
cmapass	../mlrmcl1.2/tools/normMI.py	/^		cmapass = clusterMap[cass]$/;"	v
coarsenTo	../mlrmcl1.2/Lib/struct.h	/^	int coarsenTo;$/;"	m	struct:optionsdef	access:public
coarser	../mlrmcl1.2/Lib/struct.h	/^  struct graphdef *coarser, *finer;$/;"	m	struct:graphdef	typeref:struct:graphdef::graphdef	access:public
colInd	../nlibs/CSR.h	/^	int* colInd;$/;"	m	struct:CSR	access:public
colInd	../pure_c_spmm/CSR.h	/^	int* colInd;$/;"	m	struct:CSR	access:public
col_id	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	col_id = int(float(tokens[1]))$/;"	v
cols	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
cols	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
cols	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
cols	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
compSizeDistribution	../mlrmcl1.2/Lib/io.c	/^idxtype* compSizeDistribution(GraphType* graph, int$/;"	f	signature:(GraphType* graph, int *numComponents)
compSizeDistribution	../mlrmcl1.2/Lib/proto.h	/^idxtype* compSizeDistribution(GraphType*, int*);$/;"	p	signature:(GraphType*, int*)
compareints	../mlrmcl1.2/Lib/mclbase.c	/^int compareints(const void * a, const void * b)$/;"	f	signature:(const void * a, const void * b)
compareints	../mlrmcl1.2/Lib/proto.h	/^int compareints(const void *, const void *);$/;"	p	signature:(const void *, const void *)
comparewgttypes	../mlrmcl1.2/Lib/mclbase.c	/^int comparewgttypes(const void * a, const void * b)$/;"	f	signature:(const void * a, const void * b)
computeCutAndVol	../mlrmcl1.2/Lib/metrics.c	/^void computeCutAndVol(GraphType* graph, idxtype* members, int$/;"	f	signature:(GraphType* graph, idxtype* members, int size, idxtype* ht, int* cut, int *vol)
computeThreshold	../mlrmcl1.2/Lib/mclbase.c	/^wgttype computeThreshold(wgttype avg, wgttype max)$/;"	f	signature:(wgttype avg, wgttype max)
computeThreshold	../nlibs/util.cc	/^double computeThreshold(double avg, double max) {$/;"	f	signature:(double avg, double max)
computeThreshold	../nlibs/util.h	/^double computeThreshold(double avg, double max);$/;"	p	signature:(double avg, double max)
controldef	../mlrmcl1.2/Lib/struct.h	/^struct controldef {$/;"	s
controldef::AuxTmr1	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::AuxTmr2	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::AuxTmr3	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::AuxTmr4	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::AuxTmr5	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::AuxTmr6	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::CType	../mlrmcl1.2/Lib/struct.h	/^  int CType;			\/* The type of coarsening *\/$/;"	m	struct:controldef	access:public
controldef::CoarsenTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::CoarsenTo	../mlrmcl1.2/Lib/struct.h	/^  int CoarsenTo;		\/* The # of vertices in the coarsest graph *\/$/;"	m	struct:controldef	access:public
controldef::ContractTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::IType	../mlrmcl1.2/Lib/struct.h	/^  int IType;			\/* The type of initial partitioning *\/$/;"	m	struct:controldef	access:public
controldef::InitPartTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::MatchTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::ProjectTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::RType	../mlrmcl1.2/Lib/struct.h	/^  int RType;			\/* The type of refinement *\/$/;"	m	struct:controldef	access:public
controldef::RefTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::SepTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::SplitTmr	../mlrmcl1.2/Lib/struct.h	/^        SepTmr, RefTmr, ProjectTmr, SplitTmr, AuxTmr1, AuxTmr2, AuxTmr3, AuxTmr4, AuxTmr5, AuxTmr6;$/;"	m	struct:controldef	access:public
controldef::TotalTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::UncoarsenTmr	../mlrmcl1.2/Lib/struct.h	/^  timer TotalTmr, InitPartTmr, MatchTmr, ContractTmr, CoarsenTmr, UncoarsenTmr, $/;"	m	struct:controldef	access:public
controldef::dbglvl	../mlrmcl1.2/Lib/struct.h	/^  int dbglvl;			\/* Controls the debuging output of the program *\/$/;"	m	struct:controldef	access:public
controldef::maxvwgt	../mlrmcl1.2/Lib/struct.h	/^  int maxvwgt;			\/* The maximum allowed weight for a vertex *\/$/;"	m	struct:controldef	access:public
controldef::nmaxvwgt	../mlrmcl1.2/Lib/struct.h	/^  float nmaxvwgt;		\/* The maximum allowed weight for a vertex for each constrain *\/$/;"	m	struct:controldef	access:public
controldef::nseps	../mlrmcl1.2/Lib/struct.h	/^  int nseps;			\/* The number of separators to be found during multiple bisections *\/$/;"	m	struct:controldef	access:public
controldef::oflags	../mlrmcl1.2/Lib/struct.h	/^  int oflags;$/;"	m	struct:controldef	access:public
controldef::optype	../mlrmcl1.2/Lib/struct.h	/^  int optype;			\/* Type of operation *\/$/;"	m	struct:controldef	access:public
controldef::pfactor	../mlrmcl1.2/Lib/struct.h	/^  int pfactor;			\/* .1*prunning factor *\/$/;"	m	struct:controldef	access:public
controldef::wspace	../mlrmcl1.2/Lib/struct.h	/^  WorkSpaceType wspace;		\/* Work Space Informations *\/$/;"	m	struct:controldef	access:public
convergeThreshold	../mlrmcl1.2/Lib/struct.h	/^	wgttype convergeThreshold;$/;"	m	struct:pagerankOptionsDef	access:public
conversionMethod	../mlrmcl1.2/Lib/struct.h	/^	int conversionMethod;$/;"	m	struct:dirToUndirOptionsDef	access:public
convertMetisOutputToClusterLists	../mlrmcl1.2/Lib/merge.c	/^idxtype* convertMetisOutputToClusterLists(const idxtype* part, int$/;"	f	signature:(const idxtype* part, int nvtxs, int nparts, idxtype** part_xadj)
converttoclusterlists	../mlrmcl1.2/tools/convertToClusterLists.py	/^def converttoclusterlists(fname):$/;"	f	access:public
converttoclusterlists	../mlrmcl1.2/tools/evaluateClusters.py	/^from convertToClusterLists import converttoclusterlists$/;"	i
cooColIndex	../nlibs/COO.h	/^	int * cooColIndex;$/;"	m	class:COO	access:private
cooColIndex	../pure_c_spmm/COO.h	/^	int * cooColIndex;$/;"	m	class:COO	access:private
cooRowIndex	../nlibs/COO.h	/^	int * cooRowIndex;$/;"	m	class:COO	access:private
cooRowIndex	../pure_c_spmm/COO.h	/^	int * cooRowIndex;$/;"	m	class:COO	access:private
cooVal	../nlibs/COO.h	/^	double * cooVal;$/;"	m	class:COO	access:private
cooVal	../pure_c_spmm/COO.h	/^	double * cooVal;$/;"	m	class:COO	access:private
copyListInt	../mlrmcl1.2/Lib/merge.c	/^void copyListInt(ListInt *dest, ListInt *src)$/;"	f	signature:(ListInt *dest, ListInt *src)
copyListWgt	../mlrmcl1.2/Lib/merge.c	/^void copyListWgt(ListWgt *dest, ListWgt *src)$/;"	f	signature:(ListWgt *dest, ListWgt *src)
core	../mlrmcl1.2/Lib/struct.h	/^  idxtype *core;			\/* Where pairs, indices, and degrees are coming from *\/$/;"	m	struct:workspacedef	access:public
createClusterGraph	../mlrmcl1.2/Lib/merge.c	/^ListGraph* createClusterGraph(const idxtype *part, int nparts,$/;"	f	signature:(const idxtype *part, int nparts, const GraphType* g)
createClusterGraph	../mlrmcl1.2/Lib/proto.h	/^ListGraph* createClusterGraph(const idxtype*, int, const GraphType* );$/;"	p	signature:(const idxtype*, int, const GraphType* )
currentSize	../mlrmcl1.2/Lib/struct.h	/^	int currentSize;$/;"	m	struct:matrixdef	access:public
current_row_id	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^		current_row_id = current_row_id + 1$/;"	v
current_row_id	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^current_row_id = 0$/;"	v
dbglvl	../mlrmcl1.2/Lib/struct.h	/^  int dbglvl;			\/* Controls the debuging output of the program *\/$/;"	m	struct:controldef	access:public
deepCopy	../nlibs/CSR.cc	/^CSR CSR::deepCopy() {$/;"	f	class:CSR	signature:()
deepCopy	../nlibs/CSR.h	/^ CSR deepCopy();$/;"	p	struct:CSR	access:public	signature:()
delimiter	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^delimiter = " "$/;"	v
dfTraversal	../mlrmcl1.2/Lib/proto.h	/^void dfTraversal(GraphType*, idxtype, idxtype*, int*);$/;"	p	signature:(GraphType*, idxtype, idxtype*, int*)
dfTraversal	../mlrmcl1.2/Lib/util.c	/^void dfTraversal(GraphType *graph, idxtype root, idxtype* visited, int* nVisited)$/;"	f	signature:(GraphType *graph, idxtype root, idxtype* visited, int* nVisited)
dfTraversalMatrix	../mlrmcl1.2/Lib/proto.h	/^void dfTraversalMatrix(Matrix*, idxtype, idxtype*, int*, wgttype$/;"	p	signature:(Matrix*, idxtype, idxtype*, int*, wgttype minWgt)
dfTraversalMatrix	../mlrmcl1.2/Lib/util.c	/^void dfTraversalMatrix(Matrix *graph, idxtype root, idxtype*$/;"	f	signature:(Matrix *graph, idxtype root, idxtype* visited, int* nVisited, wgttype minWgt)
diffTwoColumns	../mlrmcl1.2/Lib/mclbase.c	/^wgttype diffTwoColumns(Matrix *flows, int col1, int col2)$/;"	f	signature:(Matrix *flows, int col1, int col2)
differs	../nlibs/CSR.cc	/^double CSR::differs(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
differs	../nlibs/CSR.h	/^  double differs(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
dirToUndirOptionsDef	../mlrmcl1.2/Lib/struct.h	/^struct dirToUndirOptionsDef{$/;"	s
dirToUndirOptionsDef::bcWeight	../mlrmcl1.2/Lib/struct.h	/^	wgttype bcWeight;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::blockSize	../mlrmcl1.2/Lib/struct.h	/^	int blockSize;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::conversionMethod	../mlrmcl1.2/Lib/struct.h	/^	int conversionMethod;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::invDegreeType	../mlrmcl1.2/Lib/struct.h	/^	int invDegreeType;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::prunePercent	../mlrmcl1.2/Lib/struct.h	/^	wgttype prunePercent;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::scale	../mlrmcl1.2/Lib/struct.h	/^	wgttype scale;$/;"	m	struct:dirToUndirOptionsDef	access:public
dirToUndirOptionsDef::threshold	../mlrmcl1.2/Lib/struct.h	/^	wgttype threshold;$/;"	m	struct:dirToUndirOptionsDef	access:public
dpr_threshold	../mlrmcl1.2/Lib/struct.h	/^	float dpr_threshold;$/;"	m	struct:optionsdef	access:public
dprmcl	../mlrmcl1.2/Lib/proto.h	/^Matrix* dprmcl(Matrix*, Matrix*, GraphType*, Options, int, int);$/;"	p	signature:(Matrix*, Matrix*, GraphType*, Options, int, int)
dprmcl	../mlrmcl1.2/Lib/rmcl.c	/^Matrix* dprmcl(Matrix* flows, Matrix* adj, GraphType* graph, $/;"	f	signature:(Matrix* flows, Matrix* adj, GraphType* graph, Options opt, int maxiter, int level)
dprmclWrapper	../mlrmcl1.2/Lib/proto.h	/^void dprmclWrapper(int*, idxtype*,idxtype*,idxtype*, $/;"	p	signature:(int*, idxtype*,idxtype*,idxtype*, idxtype*, int*, idxtype*, Options)
dprmclWrapper	../mlrmcl1.2/Lib/rmcl.c	/^void dprmclWrapper(int* nvtxs, idxtype* xadj, idxtype* adjncy, idxtype$/;"	f	signature:(int* nvtxs, idxtype* xadj, idxtype* adjncy, idxtype *vwgt, idxtype* adjwgt, int* wgtflag, idxtype* indices, Options opt )
drand48	../mlrmcl1.2/Lib/proto.h	/^double drand48();$/;"	p	signature:()
dumpMatrix	../mlrmcl1.2/Lib/mclutils.c	/^void dumpMatrix(Matrix* a)$/;"	f	signature:(Matrix* a)
dumpMatrix	../mlrmcl1.2/Lib/proto.h	/^void dumpMatrix(Matrix*);$/;"	p	signature:(Matrix*)
dump_graph	../mlrmcl1.2/Lib/mclutils.c	/^void dump_graph(GraphType *graph)$/;"	f	signature:(GraphType *graph)
dump_graph	../mlrmcl1.2/Lib/proto.h	/^void dump_graph(GraphType*);$/;"	p	signature:(GraphType*)
ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype *id, *ed;$/;"	m	struct:graphdef	access:public
ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed, ned;$/;"	m	struct:vedegreedef	access:public
ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed;$/;"	m	struct:edegreedef	access:public
ed	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
ed	../mlrmcl1.2/Lib/struct.h	/^ int id, ed;            	\/* ID\/ED of nodes *\/$/;"	m	struct:rinfodef	access:public
edegreedef	../mlrmcl1.2/Lib/struct.h	/^struct edegreedef {$/;"	s
edegreedef::ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed;$/;"	m	struct:edegreedef	access:public
edegreedef::pid	../mlrmcl1.2/Lib/struct.h	/^  idxtype pid;$/;"	m	struct:edegreedef	access:public
edegrees	../mlrmcl1.2/Lib/struct.h	/^  EDegreeType *edegrees;$/;"	m	struct:workspacedef	access:public
edegrees	../mlrmcl1.2/Lib/struct.h	/^ EDegreeType *edegrees;     	\/* List of edges *\/$/;"	m	struct:rinfodef	access:public
edegrees	../mlrmcl1.2/Lib/struct.h	/^ VEDegreeType *edegrees;     	\/* List of edges *\/$/;"	m	struct:vrinfodef	access:public
edegrees	../mlrmcl1.2/Lib/struct.h	/^ idxtype edegrees[2];  $/;"	m	struct:nrinfodef	access:public
errexit	../mlrmcl1.2/Lib/proto.h	/^void errexit(char *,...);$/;"	p	signature:(char *,...)
errexit	../mlrmcl1.2/Lib/rename.h	438;"	d
errexit	../mlrmcl1.2/Lib/util.c	/^void errexit(char *f_str,...)$/;"	f	signature:(char *f_str,...)
exact	../mlrmcl1.2/Lib/struct.h	/^	int exact;$/;"	m	struct:optionsdef	access:public
exactPrune	../mlrmcl1.2/Lib/mclbase.c	/^wgttype exactPrune(int *n, idxtype* adjncy, wgttype* adjwgt,$/;"	f	signature:(int *n, idxtype* adjncy, wgttype* adjwgt, int k, wgttype initsum)
exactPrune	../mlrmcl1.2/Lib/proto.h	/^wgttype exactPrune(int*, idxtype*, wgttype*, int, wgttype);$/;"	p	signature:(int*, idxtype*, wgttype*, int, wgttype)
exactPruneGraph	../mlrmcl1.2/Lib/mclbase.c	/^void exactPruneGraph(GraphType* graph, int l, idxtype thresh )$/;"	f	signature:(GraphType* graph, int l, idxtype thresh )
exactPruneGraph	../mlrmcl1.2/Lib/proto.h	/^void exactPruneGraph(GraphType*, int, idxtype thresh=0);$/;"	p	signature:(GraphType*, int, idxtype thresh=0)
exactPruneGraphCountingSort	../mlrmcl1.2/Lib/proto.h	/^void exactPruneGraphCountingSort(GraphType*, int, int);$/;"	p	signature:(GraphType*, int, int)
exactPruneMatrix	../mlrmcl1.2/Lib/mclbase.c	/^void exactPruneMatrix(Matrix* M, int l)$/;"	f	signature:(Matrix* M, int l)
exactPruneMatrix	../mlrmcl1.2/Lib/proto.h	/^void exactPruneMatrix(Matrix*, int);$/;"	p	signature:(Matrix*, int)
expand	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* expand(Matrix* M, Matrix* M0)$/;"	f	signature:(Matrix* M, Matrix* M0)
expand	../mlrmcl1.2/Lib/proto.h	/^Matrix* expand(Matrix*,Matrix*);$/;"	p	signature:(Matrix*,Matrix*)
expand_ht	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* expand_ht(Matrix* M, Matrix* M0, idxtype*$/;"	f	signature:(Matrix* M, Matrix* M0, idxtype* hashtable, int sortLists, wgttype threshold)
expand_ht	../mlrmcl1.2/Lib/proto.h	/^Matrix* expand_ht(Matrix*,Matrix*,idxtype*, int, wgttype$/;"	p	signature:(Matrix*,Matrix*,idxtype*, int, wgttype threshold = 0)
factArray	../mlrmcl1.2/tools/evaluateClusters.py	/^factArray = [0, 0]$/;"	v
finer	../mlrmcl1.2/Lib/struct.h	/^  struct graphdef *coarser, *finer;$/;"	m	struct:graphdef	typeref:struct:graphdef::	access:public
fmalloc	../mlrmcl1.2/Lib/macros.h	127;"	d
fmalloc	../mlrmcl1.2/Lib/proto.h	/^float *fmalloc(int, const char *);$/;"	p	signature:(int, const char *)
fmalloc	../mlrmcl1.2/Lib/rename.h	443;"	d
fmalloc	../mlrmcl1.2/Lib/util.c	/^float *fmalloc(int n, const char *msg)$/;"	f	signature:(int n, const char *msg)
fmeasure	../mlrmcl1.2/tools/evaluateClusters.py	/^		fmeasure = 2*prec*rec\/(prec+rec)$/;"	v
freeMatrix	../mlrmcl1.2/Lib/mclutils.c	/^void freeMatrix(Matrix* a)$/;"	f	signature:(Matrix* a)
freeMatrix	../mlrmcl1.2/Lib/proto.h	/^void freeMatrix(Matrix*);$/;"	p	signature:(Matrix*)
freeThreadDatas	../nlibs/cpu_csr_kernel.h	/^void freeThreadDatas(thread_data_t* thread_datas, int nthreads);$/;"	p	signature:(thread_data_t* thread_datas, int nthreads)
freeThreadDatas	../nlibs/omp_csr_kernel.cc	/^void freeThreadDatas(thread_data_t* thread_datas, int nthreads) {$/;"	f	signature:(thread_data_t* thread_datas, int nthreads)
freeThreadDatas	../pure_c_spmm/cpu_csr_kernel.h	/^void freeThreadDatas(thread_data_t* thread_datas, int nthreads);$/;"	p	signature:(thread_data_t* thread_datas, int nthreads)
freeThreadDatas	../pure_c_spmm/omp_csr_kernel.cc	/^void freeThreadDatas(thread_data_t* thread_datas, int nthreads) {$/;"	f	signature:(thread_data_t* thread_datas, int nthreads)
freeThreadDatas	../pure_c_spmm/save/omp_csr_kernel.cc	/^void freeThreadDatas(thread_data_t* thread_datas, int nthreads) {$/;"	f	signature:(thread_data_t* thread_datas, int nthreads)
fwspacefree	../mlrmcl1.2/Lib/memory.c	/^void fwspacefree(CtrlType *ctrl, int n)$/;"	f	signature:(CtrlType *ctrl, int n)
fwspacefree	../mlrmcl1.2/Lib/proto.h	/^void fwspacefree(CtrlType *, int);$/;"	p	signature:(CtrlType *, int)
fwspacemalloc	../mlrmcl1.2/Lib/memory.c	/^float *fwspacemalloc(CtrlType *ctrl, int n)$/;"	f	signature:(CtrlType *ctrl, int n)
fwspacemalloc	../mlrmcl1.2/Lib/proto.h	/^float *fwspacemalloc(CtrlType *, int);$/;"	p	signature:(CtrlType *, int)
fwspacemalloc	../mlrmcl1.2/Lib/rename.h	225;"	d
gamma	../mlrmcl1.2/Lib/struct.h	/^	float gamma;$/;"	m	struct:optionsdef	access:public
gdata	../mlrmcl1.2/Lib/struct.h	/^  idxtype *gdata, *rdata;	\/* Memory pools for graph and refinement data.$/;"	m	struct:graphdef	access:public
genmmd	../mlrmcl1.2/Lib/rename.h	312;"	d
getAttractorsForAll	../mlrmcl1.2/Lib/mclutils.c	/^void getAttractorsForAll(Matrix* M)$/;"	f	signature:(Matrix* M)
getAttractorsForAll	../mlrmcl1.2/Lib/proto.h	/^void getAttractorsForAll(Matrix*);$/;"	p	signature:(Matrix*)
getCutGraph	../mlrmcl1.2/Lib/proto.h	/^GraphType* getCutGraph(GraphType*, idxtype*, int);$/;"	p	signature:(GraphType*, idxtype*, int)
getCutGraph	../mlrmcl1.2/Lib/subgraphs.c	/^GraphType* getCutGraph(GraphType* graph, idxtype* indices, $/;"	f	signature:(GraphType* graph, idxtype* indices, int wgtflag)
getDegreeHistogram	../mlrmcl1.2/Lib/metrics.c	/^idxtype* getDegreeHistogram(GraphType* graph, int* maxDegree, int$/;"	f	signature:(GraphType* graph, int* maxDegree, int logScale)
getDegreeHistogram	../mlrmcl1.2/Lib/proto.h	/^idxtype* getDegreeHistogram(GraphType*, int*, int);$/;"	p	signature:(GraphType*, int*, int)
getDprAdjMatrix	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* getDprAdjMatrix(Matrix* flows, Matrix* adj, idxtype*$/;"	f	signature:(Matrix* flows, Matrix* adj, idxtype* hashtable, wgttype threshold)
getDprAdjMatrix	../mlrmcl1.2/Lib/proto.h	/^Matrix* getDprAdjMatrix(Matrix*,Matrix*,idxtype*,wgttype);$/;"	p	signature:(Matrix*,Matrix*,idxtype*,wgttype)
getLogBin	../mlrmcl1.2/Lib/metrics.c	/^int getLogBin(int a)$/;"	f	signature:(int a)
getNodesToComponentMap	../mlrmcl1.2/Lib/io.c	/^idxtype* getNodesToComponentMap(Matrix* graph1, int *numComponents,$/;"	f	signature:(Matrix* graph1, int *numComponents, wgttype minWgt)
getNodesToComponentMap	../mlrmcl1.2/Lib/proto.h	/^idxtype* getNodesToComponentMap(Matrix*, int*, wgttype);$/;"	p	signature:(Matrix*, int*, wgttype)
getPermutedGraph	../mlrmcl1.2/Lib/mclutils.c	/^void getPermutedGraph(idxtype* perm, idxtype* revPerm, int nvtxs, $/;"	f	signature:(idxtype* perm, idxtype* revPerm, int nvtxs, int nedges, idxtype* xadj, idxtype* adjncy, idxtype* adjwgt, idxtype** p_xadj, idxtype** p_adjncy, idxtype** p_adjwgt)
getPermutedGraph	../mlrmcl1.2/Lib/proto.h	/^void getPermutedGraph(idxtype*, idxtype*, int, int, idxtype*,$/;"	p	signature:(idxtype*, idxtype*, int, int, idxtype*, idxtype*, idxtype*, idxtype**, idxtype**, idxtype** )
getRowSums	../mlrmcl1.2/Lib/mclbase.c	/^wgttype* getRowSums(Matrix* a)$/;"	f	signature:(Matrix* a)
getSpMMFlops	../nlibs/cpu_csr_kernel.cc	/^long long getSpMMFlops(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, const int m, const int k, const int n)
getSpMMFlops	../nlibs/cpu_csr_kernel.h	/^long long getSpMMFlops(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, const int m, const int k, const int n)
getSpMMFlops	../pure_c_spmm/cpu_csr_kernel.cc	/^long long getSpMMFlops(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, const int m, const int k, const int n)
getSpMMFlops	../pure_c_spmm/cpu_csr_kernel.h	/^long long getSpMMFlops(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, const int m, const int k, const int n)
getSubgraph	../mlrmcl1.2/Lib/proto.h	/^void getSubgraph(GraphType*, idxtype*, int, int, GraphType**);$/;"	p	signature:(GraphType*, idxtype*, int, int, GraphType**)
getSubgraph	../mlrmcl1.2/Lib/subgraphs.c	/^void getSubgraph(GraphType *graph, idxtype* newIds, int new_nvtxs, int$/;"	f	signature:(GraphType *graph, idxtype* newIds, int new_nvtxs, int wgtflag, GraphType **new_graph)
getTranspose	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* getTranspose(Matrix* M)$/;"	f	signature:(Matrix* M)
getTranspose	../mlrmcl1.2/Lib/proto.h	/^Matrix* getTranspose(Matrix*);$/;"	p	signature:(Matrix*)
getTranspose2	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* getTranspose2(Matrix* M)$/;"	f	signature:(Matrix* M)
getTranspose2	../mlrmcl1.2/Lib/proto.h	/^Matrix* getTranspose2(Matrix*);$/;"	p	signature:(Matrix*)
getWeightsHistogram	../mlrmcl1.2/Lib/metrics.c	/^idxtype* getWeightsHistogram(GraphType* graph, int* maxWeight, int$/;"	f	signature:(GraphType* graph, int* maxWeight, int logScale)
getWeightsHistogram	../mlrmcl1.2/Lib/proto.h	/^idxtype* getWeightsHistogram(GraphType*, int*, int);$/;"	p	signature:(GraphType*, int*, int)
gettimer	../mlrmcl1.2/Lib/macros.h	114;"	d
globallySampleEdges	../mlrmcl1.2/Lib/proto.h	/^void globallySampleEdges(int, int, idxtype*, idxtype*, idxtype*,$/;"	p	signature:(int, int, idxtype*, idxtype*, idxtype*, idxtype**, idxtype**, float)
globallySampleEdges	../mlrmcl1.2/Lib/subgraphs.c	/^void globallySampleEdges(int nvtxs, int nedges, idxtype* xadj, idxtype*$/;"	f	signature:(int nvtxs, int nedges, idxtype* xadj, idxtype* adjncy, idxtype* adjwgt, idxtype** new_xadj, idxtype** new_adjncy, float gsRatio)
graphdef	../mlrmcl1.2/Lib/struct.h	/^struct graphdef {$/;"	s
graphdef::adjncy	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjncy;		\/* Array that stores the adjacency lists of nvtxs *\/$/;"	m	struct:graphdef	access:public
graphdef::adjwgt	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjwgt;		\/* Array that stores the weights of the adjacency lists *\/$/;"	m	struct:graphdef	access:public
graphdef::adjwgtsum	../mlrmcl1.2/Lib/struct.h	/^  idxtype *adjwgtsum;		\/* The sum of the adjacency weight of each vertex *\/$/;"	m	struct:graphdef	access:public
graphdef::bndind	../mlrmcl1.2/Lib/struct.h	/^  idxtype *bndptr, *bndind;$/;"	m	struct:graphdef	access:public
graphdef::bndptr	../mlrmcl1.2/Lib/struct.h	/^  idxtype *bndptr, *bndind;$/;"	m	struct:graphdef	access:public
graphdef::cmap	../mlrmcl1.2/Lib/struct.h	/^  idxtype *cmap;$/;"	m	struct:graphdef	access:public
graphdef::coarser	../mlrmcl1.2/Lib/struct.h	/^  struct graphdef *coarser, *finer;$/;"	m	struct:graphdef	typeref:struct:graphdef::graphdef	access:public
graphdef::ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype *id, *ed;$/;"	m	struct:graphdef	access:public
graphdef::finer	../mlrmcl1.2/Lib/struct.h	/^  struct graphdef *coarser, *finer;$/;"	m	struct:graphdef	typeref:struct:graphdef::	access:public
graphdef::gdata	../mlrmcl1.2/Lib/struct.h	/^  idxtype *gdata, *rdata;	\/* Memory pools for graph and refinement data.$/;"	m	struct:graphdef	access:public
graphdef::id	../mlrmcl1.2/Lib/struct.h	/^  idxtype *id, *ed;$/;"	m	struct:graphdef	access:public
graphdef::isDirected	../mlrmcl1.2/Lib/struct.h	/^  int isDirected; $/;"	m	struct:graphdef	access:public
graphdef::isOrgGraph	../mlrmcl1.2/Lib/struct.h	/^  int isOrgGraph; $/;"	m	struct:graphdef	access:public
graphdef::label	../mlrmcl1.2/Lib/struct.h	/^  idxtype *label;$/;"	m	struct:graphdef	access:public
graphdef::mincut	../mlrmcl1.2/Lib/struct.h	/^  int mincut, minvol;$/;"	m	struct:graphdef	access:public
graphdef::minvol	../mlrmcl1.2/Lib/struct.h	/^  int mincut, minvol;$/;"	m	struct:graphdef	access:public
graphdef::nbnd	../mlrmcl1.2/Lib/struct.h	/^  int nbnd;$/;"	m	struct:graphdef	access:public
graphdef::ncon	../mlrmcl1.2/Lib/struct.h	/^  int ncon;			\/* The # of constrains *\/ $/;"	m	struct:graphdef	access:public
graphdef::nedges	../mlrmcl1.2/Lib/struct.h	/^  int nvtxs, nedges;		\/* The # of vertices and edges in the graph *\/$/;"	m	struct:graphdef	access:public
graphdef::npwgts	../mlrmcl1.2/Lib/struct.h	/^  float *npwgts;		\/* The normalized partition weights *\/$/;"	m	struct:graphdef	access:public
graphdef::nrinfo	../mlrmcl1.2/Lib/struct.h	/^  NRInfoType *nrinfo;$/;"	m	struct:graphdef	access:public
graphdef::numDescendants	../mlrmcl1.2/Lib/struct.h	/^  idxtype *numDescendants;$/;"	m	struct:graphdef	access:public
graphdef::nvtxs	../mlrmcl1.2/Lib/struct.h	/^  int nvtxs, nedges;		\/* The # of vertices and edges in the graph *\/$/;"	m	struct:graphdef	access:public
graphdef::nvwgt	../mlrmcl1.2/Lib/struct.h	/^  float *nvwgt;			\/* Normalized vertex weights *\/$/;"	m	struct:graphdef	access:public
graphdef::pagerank	../mlrmcl1.2/Lib/struct.h	/^  wgttype *pagerank;$/;"	m	struct:graphdef	access:public
graphdef::pwgts	../mlrmcl1.2/Lib/struct.h	/^  idxtype *where, *pwgts;$/;"	m	struct:graphdef	access:public
graphdef::rdata	../mlrmcl1.2/Lib/struct.h	/^  idxtype *gdata, *rdata;	\/* Memory pools for graph and refinement data.$/;"	m	struct:graphdef	access:public
graphdef::rinfo	../mlrmcl1.2/Lib/struct.h	/^  RInfoType *rinfo;$/;"	m	struct:graphdef	access:public
graphdef::rmap1	../mlrmcl1.2/Lib/struct.h	/^  idxtype *rmap1;$/;"	m	struct:graphdef	access:public
graphdef::rmap2	../mlrmcl1.2/Lib/struct.h	/^  idxtype *rmap2;$/;"	m	struct:graphdef	access:public
graphdef::vrinfo	../mlrmcl1.2/Lib/struct.h	/^  VRInfoType *vrinfo;$/;"	m	struct:graphdef	access:public
graphdef::vsize	../mlrmcl1.2/Lib/struct.h	/^  idxtype *vsize;		\/* Vertex sizes for min-volume formulation *\/$/;"	m	struct:graphdef	access:public
graphdef::vwgt	../mlrmcl1.2/Lib/struct.h	/^  idxtype *vwgt;		\/* Vertex weights *\/$/;"	m	struct:graphdef	access:public
graphdef::where	../mlrmcl1.2/Lib/struct.h	/^  idxtype *where, *pwgts;$/;"	m	struct:graphdef	access:public
graphdef::xadj	../mlrmcl1.2/Lib/struct.h	/^  idxtype *xadj;		\/* Pointers to the locally stored vertices *\/$/;"	m	struct:graphdef	access:public
gtAssignments	../mlrmcl1.2/tools/normMI.py	/^gtAssignments = {}$/;"	v
gtClusterCounts	../mlrmcl1.2/tools/normMI.py	/^gtClusterCounts = {}$/;"	v
gtClusterSizes	../mlrmcl1.2/tools/evaluateClusters.py	/^gtClusterSizes = {}$/;"	v
gtCount	../mlrmcl1.2/tools/normMI.py	/^	gtCount = float(gtCount)$/;"	v
gtCounts	../mlrmcl1.2/tools/normMI.py	/^gtCounts = []$/;"	v
gtMap	../mlrmcl1.2/tools/normMI.py	/^gtMap = {}$/;"	v
gtMemberships	../mlrmcl1.2/tools/evaluateClusters.py	/^gtMemberships = []$/;"	v
gtass	../mlrmcl1.2/tools/normMI.py	/^		gtass = gtAssignments[id]$/;"	v
gtc	../mlrmcl1.2/tools/normMI.py	/^		gtc = int(t[0])$/;"	v
gtc	../mlrmcl1.2/tools/normMI.py	/^		gtc = int(t[1])$/;"	v
gtcCount	../mlrmcl1.2/tools/normMI.py	/^	gtcCount = math.log(float(gtCounts[gtc]),2)$/;"	v
gtcc	../mlrmcl1.2/tools/normMI.py	/^	gtcc = gtClusterCounts[gtc]$/;"	v
gtccCount	../mlrmcl1.2/tools/normMI.py	/^		gtccCount = float(gtcc[cluster])$/;"	v
gv	../mlrmcl1.2/Lib/struct.h	/^  idxtype gv;$/;"	m	struct:vedegreedef	access:public
gv	../mlrmcl1.2/Lib/struct.h	/^ int gv;            		\/* IV\/EV of nodes *\/$/;"	m	struct:vrinfodef	access:public
h_cluster	../mlrmcl1.2/tools/normMI.py	/^	h_cluster = h_cluster+(cCount\/N_cluster)*(logN_cluster-math.log(cCount,2))$/;"	v
h_cluster	../mlrmcl1.2/tools/normMI.py	/^h_cluster = 0 #entropy of cluster assignments$/;"	v
h_gtc	../mlrmcl1.2/tools/normMI.py	/^	h_gtc = h_gtc+(gtCount\/N)*(logN-math.log(gtCount,2))$/;"	v
h_gtc	../mlrmcl1.2/tools/normMI.py	/^h_gtc = 0 # entropy of ground truth assignments$/;"	v
hashes	../mlrmcl1.2/Lib/struct.h	/^	idxtype *hashes;$/;"	m	struct:hashtabledef	access:public
hashtabledef	../mlrmcl1.2/Lib/struct.h	/^struct hashtabledef$/;"	s
hashtabledef::hashes	../mlrmcl1.2/Lib/struct.h	/^	idxtype *hashes;$/;"	m	struct:hashtabledef	access:public
hashtabledef::numHashes	../mlrmcl1.2/Lib/struct.h	/^	int numHashes;$/;"	m	struct:hashtabledef	access:public
hashtabledef::numNodes	../mlrmcl1.2/Lib/struct.h	/^	int numNodes;$/;"	m	struct:hashtabledef	access:public
hashtabledef::sortedNodeIds	../mlrmcl1.2/Lib/struct.h	/^	idxtype *sortedNodeIds; $/;"	m	struct:hashtabledef	access:public
heap	../mlrmcl1.2/Lib/struct.h	/^  KeyValueType *heap;$/;"	m	struct:PQueueType	access:public
histogram	../mlrmcl1.2/Lib/metrics.c	/^idxtype* histogram(idxtype* values, int n, int numUnique)$/;"	f	signature:(idxtype* values, int n, int numUnique)
histogram	../mlrmcl1.2/Lib/proto.h	/^idxtype* histogram(idxtype*, int, int);$/;"	p	signature:(idxtype*, int, int)
hubPct	../mlrmcl1.2/Lib/struct.h	/^	float hubPct;$/;"	m	struct:optionsdef	access:public
hubRemoval	../mlrmcl1.2/Lib/struct.h	/^	int hubRemoval;$/;"	m	struct:optionsdef	access:public
iJC	../nlibs/cpu_csr_kernel.h	/^  int *iJC;$/;"	m	struct:thread_data_t	access:public
iJC	../pure_c_spmm/cpu_csr_kernel.h	/^  int *iJC;$/;"	m	struct:thread_data_t	access:public
iamax	../mlrmcl1.2/Lib/proto.h	/^int iamax(int, int *);$/;"	p	signature:(int, int *)
iamax	../mlrmcl1.2/Lib/rename.h	451;"	d
iamax	../mlrmcl1.2/Lib/util.c	/^int iamax(int n, int *x)$/;"	f	signature:(int n, int *x)
id	../mlrmcl1.2/Lib/struct.h	/^  idxtype *id, *ed;$/;"	m	struct:graphdef	access:public
id	../mlrmcl1.2/Lib/struct.h	/^  int id;                       	\/* The id value of the node *\/$/;"	m	struct:ListNodeType	access:public
id	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
id	../mlrmcl1.2/Lib/struct.h	/^ int id, ed;            	\/* ID\/ED of nodes *\/$/;"	m	struct:rinfodef	access:public
id	../mlrmcl1.2/tools/normMI.py	/^		id = int(t[0])$/;"	v
id	../mlrmcl1.2/tools/normMI.py	/^		id = lineNo$/;"	v
idxadd	../mlrmcl1.2/Lib/proto.h	/^void idxadd(int, idxtype *, idxtype *);$/;"	p	signature:(int, idxtype *, idxtype *)
idxadd	../mlrmcl1.2/Lib/rename.h	460;"	d
idxadd	../mlrmcl1.2/Lib/util.c	/^void idxadd(int n, idxtype *x, idxtype *y)$/;"	f	signature:(int n, idxtype *x, idxtype *y)
idxamax	../mlrmcl1.2/Lib/proto.h	/^int idxamax(int, idxtype *);$/;"	p	signature:(int, idxtype *)
idxamax	../mlrmcl1.2/Lib/rename.h	452;"	d
idxamax	../mlrmcl1.2/Lib/util.c	/^int idxamax(int n, idxtype *x)$/;"	f	signature:(int n, idxtype *x)
idxamax_strd	../mlrmcl1.2/Lib/proto.h	/^int idxamax_strd(int, idxtype *, int);$/;"	p	signature:(int, idxtype *, int)
idxamax_strd	../mlrmcl1.2/Lib/rename.h	453;"	d
idxamax_strd	../mlrmcl1.2/Lib/util.c	/^int idxamax_strd(int n, idxtype *x, int incx)$/;"	f	signature:(int n, idxtype *x, int incx)
idxamin	../mlrmcl1.2/Lib/proto.h	/^int idxamin(int, idxtype *);$/;"	p	signature:(int, idxtype *)
idxamin	../mlrmcl1.2/Lib/rename.h	456;"	d
idxamin	../mlrmcl1.2/Lib/util.c	/^int idxamin(int n, idxtype *x)$/;"	f	signature:(int n, idxtype *x)
idxcopy	../mlrmcl1.2/Lib/macros.h	103;"	d
idxmalloc	../mlrmcl1.2/Lib/macros.h	128;"	d
idxmalloc	../mlrmcl1.2/Lib/proto.h	/^idxtype *idxmalloc(int, const char *);$/;"	p	signature:(int, const char *)
idxmalloc	../mlrmcl1.2/Lib/rename.h	442;"	d
idxmalloc	../mlrmcl1.2/Lib/util.c	/^idxtype *idxmalloc(int n, const char *msg)$/;"	f	signature:(int n, const char *msg)
idxset	../mlrmcl1.2/Lib/proto.h	/^idxtype *idxset(int n, idxtype val, idxtype *x);$/;"	p	signature:(int n, idxtype val, idxtype *x)
idxset	../mlrmcl1.2/Lib/rename.h	449;"	d
idxset	../mlrmcl1.2/Lib/util.c	/^idxtype *idxset(int n, idxtype val, idxtype *x)$/;"	f	signature:(int n, idxtype val, idxtype *x)
idxsmalloc	../mlrmcl1.2/Lib/macros.h	130;"	d
idxsmalloc	../mlrmcl1.2/Lib/proto.h	/^idxtype *idxsmalloc(int, idxtype, const char *);$/;"	p	signature:(int, idxtype, const char *)
idxsmalloc	../mlrmcl1.2/Lib/rename.h	445;"	d
idxsmalloc	../mlrmcl1.2/Lib/util.c	/^idxtype *idxsmalloc(int n, idxtype ival, const char *msg)$/;"	f	signature:(int n, idxtype ival, const char *msg)
idxsum	../mlrmcl1.2/Lib/proto.h	/^int idxsum(int, idxtype *);$/;"	p	signature:(int, idxtype *)
idxsum	../mlrmcl1.2/Lib/rename.h	458;"	d
idxsum	../mlrmcl1.2/Lib/util.c	/^int idxsum(int n, idxtype *x)$/;"	f	signature:(int n, idxtype *x)
idxsum_strd	../mlrmcl1.2/Lib/proto.h	/^int idxsum_strd(int, idxtype *, int);$/;"	p	signature:(int, idxtype *, int)
idxsum_strd	../mlrmcl1.2/Lib/rename.h	459;"	d
idxsum_strd	../mlrmcl1.2/Lib/util.c	/^int idxsum_strd(int n, idxtype *x, int incx)$/;"	f	signature:(int n, idxtype *x, int incx)
idxtype	../mlrmcl1.2/Lib/struct.h	/^typedef int idxtype;$/;"	t
idxtype	../mlrmcl1.2/Lib/struct.h	/^typedef short idxtype;$/;"	t
idxwspacefree	../mlrmcl1.2/Lib/memory.c	/^void idxwspacefree(CtrlType *ctrl, int n)$/;"	f	signature:(CtrlType *ctrl, int n)
idxwspacefree	../mlrmcl1.2/Lib/proto.h	/^void idxwspacefree(CtrlType *, int);$/;"	p	signature:(CtrlType *, int)
idxwspacefree	../mlrmcl1.2/Lib/rename.h	224;"	d
idxwspacemalloc	../mlrmcl1.2/Lib/memory.c	/^idxtype *idxwspacemalloc(CtrlType *ctrl, int n)$/;"	f	signature:(CtrlType *ctrl, int n)
idxwspacemalloc	../mlrmcl1.2/Lib/proto.h	/^idxtype *idxwspacemalloc(CtrlType *, int);$/;"	p	signature:(CtrlType *, int)
idxwspacemalloc	../mlrmcl1.2/Lib/rename.h	223;"	d
iidxsort	../mlrmcl1.2/Lib/myqsort.c	/^void iidxsort(int n, idxtype *base)$/;"	f	signature:(int n, idxtype *base)
iidxsort	../mlrmcl1.2/Lib/proto.h	/^void iidxsort(int, idxtype *);$/;"	p	signature:(int, idxtype *)
iidxsort	../mlrmcl1.2/Lib/rename.h	346;"	d
iintsort	../mlrmcl1.2/Lib/myqsort.c	/^void iintsort(int n, int *base)$/;"	f	signature:(int n, int *base)
iintsort	../mlrmcl1.2/Lib/proto.h	/^void iintsort(int, int *);$/;"	p	signature:(int, int *)
iintsort	../mlrmcl1.2/Lib/rename.h	347;"	d
iiqst	../mlrmcl1.2/Lib/myqsort.c	/^static void iiqst(int *, int *);$/;"	p	file:	signature:(int *, int *)
iiqst	../mlrmcl1.2/Lib/myqsort.c	/^static void iiqst(int *base, int *max)$/;"	f	file:	signature:(int *base, int *max)
ikeysort	../mlrmcl1.2/Lib/myqsort.c	/^void ikeysort(int n, KeyValueType *base)$/;"	f	signature:(int n, KeyValueType *base)
ikeysort	../mlrmcl1.2/Lib/proto.h	/^void ikeysort(int, KeyValueType *);$/;"	p	signature:(int, KeyValueType *)
ikeysort	../mlrmcl1.2/Lib/rename.h	348;"	d
ikeyvalsort	../mlrmcl1.2/Lib/myqsort.c	/^void ikeyvalsort(int n, KeyValueType *base)$/;"	f	signature:(int n, KeyValueType *base)
ikeyvalsort	../mlrmcl1.2/Lib/proto.h	/^void ikeyvalsort(int, KeyValueType *);$/;"	p	signature:(int, KeyValueType *)
ikeyvalsort	../mlrmcl1.2/Lib/rename.h	349;"	d
imalloc	../mlrmcl1.2/Lib/macros.h	126;"	d
imalloc	../mlrmcl1.2/Lib/proto.h	/^int *imalloc(int, const char *);$/;"	p	signature:(int, const char *)
imalloc	../mlrmcl1.2/Lib/rename.h	441;"	d
imalloc	../mlrmcl1.2/Lib/util.c	/^int *imalloc(int n, const char *msg)$/;"	f	signature:(int n, const char *msg)
imax	../mlrmcl1.2/Lib/struct.h	/^  int imax[2][MAXNCON];$/;"	m	struct:vpwgtdef	access:public
increment	../mlrmcl1.2/Lib/struct.h	/^	int increment;$/;"	m	struct:intlistdef	access:public
increment	../mlrmcl1.2/Lib/struct.h	/^	int increment;$/;"	m	struct:wgtlistdef	access:public
inflate	../mlrmcl1.2/Lib/mclbase.c	/^void inflate(Matrix* a, float gamma)$/;"	f	signature:(Matrix* a, float gamma)
inflate	../mlrmcl1.2/Lib/proto.h	/^void inflate(Matrix*,float);$/;"	p	signature:(Matrix*,float)
init	../nlibs/cpu_csr_kernel.h	/^  void init(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
init	../pure_c_spmm/cpu_csr_kernel.h	/^  void init(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
initOptions	../mlrmcl1.2/Lib/proto.h	/^void initOptions(Options*);$/;"	p	signature:(Options*)
initOptions	../mlrmcl1.2/Lib/util.c	/^void initOptions(Options* opt)$/;"	f	signature:(Options* opt)
initPageRankOptions	../mlrmcl1.2/Lib/proto.h	/^void initPageRankOptions(PageRankOptions *opt);$/;"	p	signature:(PageRankOptions *opt)
inputFile	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^inputFile = file(args[1],"r")$/;"	v
inputNormalizer	../mlrmcl1.2/tools/evaluateClusters.py	/^	inputNormalizer = float(args[8])$/;"	v
inputNormalizer	../mlrmcl1.2/tools/evaluateClusters.py	/^inputNormalizer = 0$/;"	v
insertLastElement	../mlrmcl1.2/Lib/mclbase.c	/^int insertLastElement(idxtype* adjncy, wgttype* adjwgt, int count)$/;"	f	signature:(idxtype* adjncy, wgttype* adjwgt, int count)
intersect2	../mlrmcl1.2/tools/evaluateClusters.py	/^		intersect2 = True$/;"	v
intersect2	../mlrmcl1.2/tools/evaluateClusters.py	/^intersect2 = False$/;"	v
intersects	../mlrmcl1.2/tools/evaluateClusters.py	/^	intersects = {}$/;"	v
intlistdef	../mlrmcl1.2/Lib/struct.h	/^struct intlistdef{$/;"	s
intlistdef::allocSize	../mlrmcl1.2/Lib/struct.h	/^	int allocSize;$/;"	m	struct:intlistdef	access:public
intlistdef::increment	../mlrmcl1.2/Lib/struct.h	/^	int increment;$/;"	m	struct:intlistdef	access:public
intlistdef::l	../mlrmcl1.2/Lib/struct.h	/^	idxtype* l;$/;"	m	struct:intlistdef	access:public
intlistdef::length	../mlrmcl1.2/Lib/struct.h	/^	int length;$/;"	m	struct:intlistdef	access:public
invDegreeType	../mlrmcl1.2/Lib/struct.h	/^	int invDegreeType;$/;"	m	struct:dirToUndirOptionsDef	access:public
isConverged	../mlrmcl1.2/Lib/mclutils.c	/^int isConverged(idxtype* oldAttr, idxtype* newAttr, int n)$/;"	f	signature:(idxtype* oldAttr, idxtype* newAttr, int n)
isConverged	../mlrmcl1.2/Lib/proto.h	/^int isConverged(idxtype*, idxtype*, int);$/;"	p	signature:(idxtype*, idxtype*, int)
isConverged2	../mlrmcl1.2/Lib/mclutils.c	/^int isConverged2(idxtype* oldAttr, idxtype* newAttr, int n)$/;"	f	signature:(idxtype* oldAttr, idxtype* newAttr, int n)
isConverged2	../mlrmcl1.2/Lib/proto.h	/^int isConverged2(idxtype*, idxtype*, int);$/;"	p	signature:(idxtype*, idxtype*, int)
isDirected	../mlrmcl1.2/Lib/struct.h	/^  int isDirected; $/;"	m	struct:graphdef	access:public
isEqual	../nlibs/CSR.h	/^  bool isEqual(const CSR &B) const {$/;"	f	struct:CSR	access:public	signature:(const CSR &B) const
isEqual	../pure_c_spmm/CSR.h	/^  bool isEqual(const CSR &B) const {$/;"	f	struct:CSR	access:public	signature:(const CSR &B) const
isFvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^		isFvalues = True$/;"	v
isFvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^isFvalues = False $/;"	v
isGraphConnected	../mlrmcl1.2/Lib/io.c	/^int isGraphConnected(GraphType *graph)$/;"	f	signature:(GraphType *graph)
isGraphConnected	../mlrmcl1.2/Lib/proto.h	/^int isGraphConnected(GraphType*);$/;"	p	signature:(GraphType*)
isOrgGraph	../mlrmcl1.2/Lib/struct.h	/^  int isOrgGraph; $/;"	m	struct:graphdef	access:public
iset	../mlrmcl1.2/Lib/proto.h	/^int *iset(int n, int val, int *x);$/;"	p	signature:(int n, int val, int *x)
iset	../mlrmcl1.2/Lib/rename.h	448;"	d
iset	../mlrmcl1.2/Lib/util.c	/^int *iset(int n, int val, int *x)$/;"	f	signature:(int n, int val, int *x)
ismalloc	../mlrmcl1.2/Lib/macros.h	129;"	d
ismalloc	../mlrmcl1.2/Lib/proto.h	/^int *ismalloc(int, int, const char *);$/;"	p	signature:(int, int, const char *)
ismalloc	../mlrmcl1.2/Lib/rename.h	444;"	d
ismalloc	../mlrmcl1.2/Lib/util.c	/^int *ismalloc(int n, int ival, const char *msg)$/;"	f	signature:(int n, int ival, const char *msg)
ispow2	../mlrmcl1.2/Lib/proto.h	/^int ispow2(int);$/;"	p	signature:(int)
ispow2	../mlrmcl1.2/Lib/rename.h	470;"	d
ispow2	../mlrmcl1.2/Lib/util.c	/^int ispow2(int a)$/;"	f	signature:(int a)
isum	../mlrmcl1.2/Lib/proto.h	/^int isum(int, int *);$/;"	p	signature:(int, int *)
isum	../mlrmcl1.2/Lib/rename.h	462;"	d
isum	../mlrmcl1.2/Lib/util.c	/^int isum(int n, int *x)$/;"	f	signature:(int n, int *x)
iter_per_level	../mlrmcl1.2/Lib/struct.h	/^	int iter_per_level;$/;"	m	struct:optionsdef	access:public
k	../mlrmcl1.2/Lib/struct.h	/^	int k;$/;"	m	struct:optionsdef	access:public
key	../mlrmcl1.2/Lib/struct.h	/^  idxtype key;$/;"	m	struct:KeyValueType	access:public
keyiqst	../mlrmcl1.2/Lib/myqsort.c	/^static void keyiqst(KeyValueType *, KeyValueType *);$/;"	p	file:	signature:(KeyValueType *, KeyValueType *)
keyiqst	../mlrmcl1.2/Lib/myqsort.c	/^static void keyiqst(KeyValueType *base, KeyValueType *max)$/;"	f	file:	signature:(KeyValueType *base, KeyValueType *max)
keyvaliqst	../mlrmcl1.2/Lib/myqsort.c	/^static void keyvaliqst(KeyValueType *, KeyValueType *);$/;"	p	file:	signature:(KeyValueType *, KeyValueType *)
keyvaliqst	../mlrmcl1.2/Lib/myqsort.c	/^static void keyvaliqst(KeyValueType *base, KeyValueType *max)$/;"	f	file:	signature:(KeyValueType *base, KeyValueType *max)
knnMatrix	../mlrmcl1.2/Lib/proto.h	/^void knnMatrix(Matrix*, int);$/;"	p	signature:(Matrix*, int)
l	../mlrmcl1.2/Lib/struct.h	/^	idxtype* l;$/;"	m	struct:intlistdef	access:public
l	../mlrmcl1.2/Lib/struct.h	/^	wgttype* l;$/;"	m	struct:wgtlistdef	access:public
l	../mlrmcl1.2/tools/evaluateClusters.py	/^	l = float(len(outClusters))$/;"	v
l	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^			l = adjListMap[current_row_id]$/;"	v
label	../mlrmcl1.2/Lib/struct.h	/^  idxtype *label;$/;"	m	struct:graphdef	access:public
length	../mlrmcl1.2/Lib/struct.h	/^	int length;$/;"	m	struct:intlistdef	access:public
length	../mlrmcl1.2/Lib/struct.h	/^	int length;$/;"	m	struct:wgtlistdef	access:public
line	../mlrmcl1.2/tools/evaluateClusters.py	/^	line = line.strip()$/;"	v
lineNo	../mlrmcl1.2/tools/normMI.py	/^	lineNo = lineNo+1$/;"	v
lineNo	../mlrmcl1.2/tools/normMI.py	/^lineNo = 1$/;"	v
list	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^			list = [str(col_id)]$/;"	v
listgraphdef	../mlrmcl1.2/Lib/struct.h	/^struct listgraphdef{$/;"	s
listgraphdef::adjLists	../mlrmcl1.2/Lib/struct.h	/^	ListInt* adjLists;$/;"	m	struct:listgraphdef	access:public
listgraphdef::nedges	../mlrmcl1.2/Lib/struct.h	/^	int nedges;$/;"	m	struct:listgraphdef	access:public
listgraphdef::nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs;$/;"	m	struct:listgraphdef	access:public
listgraphdef::vols	../mlrmcl1.2/Lib/struct.h	/^	wgttype* vols; \/\/ volumes, i.e. sum of edge weights$/;"	m	struct:listgraphdef	access:public
listgraphdef::wgtLists	../mlrmcl1.2/Lib/struct.h	/^	ListWgt* wgtLists;$/;"	m	struct:listgraphdef	access:public
locator	../mlrmcl1.2/Lib/struct.h	/^  idxtype *locator;$/;"	m	struct:PQueueType	access:public
log10BinCoeff	../mlrmcl1.2/tools/evaluateClusters.py	/^def log10BinCoeff(n,x):$/;"	f	access:public
log10Perm	../mlrmcl1.2/tools/evaluateClusters.py	/^def log10Perm(n,x):$/;"	f	access:public
log10fact	../mlrmcl1.2/tools/evaluateClusters.py	/^def log10fact(n):$/;"	f	access:public
log2	../mlrmcl1.2/Lib/proto.h	/^int log2(int);$/;"	p	signature:(int)
log2	../mlrmcl1.2/Lib/rename.h	472;"	d
log2	../mlrmcl1.2/Lib/util.c	/^int log2(int a)$/;"	f	signature:(int a)
logN	../mlrmcl1.2/tools/normMI.py	/^logN = math.log(N,2)$/;"	v
logN_cluster	../mlrmcl1.2/tools/normMI.py	/^logN_cluster = math.log(float(N_cluster),2)$/;"	v
lookForSingletons	../mlrmcl1.2/Lib/proto.h	/^idxtype* lookForSingletons(GraphType*, int*);$/;"	p	signature:(GraphType*, int*)
lookForSingletons	../mlrmcl1.2/Lib/util.c	/^idxtype* lookForSingletons(GraphType* graph, int* noOfSingletons)$/;"	f	signature:(GraphType* graph, int* noOfSingletons)
m	../mlrmcl1.2/tools/evaluateClusters.py	/^		m = float(intersects[gtCluster])$/;"	v
main	../mlrmcl1.2/Programs/mergeClusters.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	../mlrmcl1.2/Programs/mlrmcl.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	../mlrmcl1.2/Programs/ncut.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	../mlrmcl1.2/Programs/nrmcl.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	../nrmcl.cc	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	../pure_c_spmm/main.cc	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	../tests/COO_test.cc	/^int main() {$/;"	f	signature:()
main	../tests/util_test.cc	/^int main() {$/;"	f	signature:()
makeOrdered	../nlibs/COO.cc	/^void COO::makeOrdered() const {$/;"	f	class:COO	signature:() const
makeOrdered	../nlibs/COO.h	/^  void makeOrdered() const;$/;"	p	class:COO	access:public	signature:() const
makeOrdered	../nlibs/CSR.cc	/^void CSR::makeOrdered() {$/;"	f	class:CSR	signature:()
makeOrdered	../nlibs/CSR.h	/^  void makeOrdered();$/;"	p	struct:CSR	access:public	signature:()
makeOrdered	../pure_c_spmm/COO.cc	/^void COO::makeOrdered() const {$/;"	f	class:COO	signature:() const
makeOrdered	../pure_c_spmm/COO.h	/^  void makeOrdered() const;$/;"	p	class:COO	access:public	signature:() const
makeOrdered	../pure_c_spmm/CSR.cc	/^void CSR::makeOrdered() {$/;"	f	class:CSR	signature:()
makeOrdered	../pure_c_spmm/CSR.h	/^  void makeOrdered();$/;"	p	struct:CSR	access:public	signature:()
mapIndices	../mlrmcl1.2/Lib/proto.h	/^void mapIndices(idxtype*, idxtype*, int, int);$/;"	p	signature:(idxtype*, idxtype*, int, int)
mapIndices	../mlrmcl1.2/Lib/util.c	/^void mapIndices(idxtype *indices, idxtype* map, int n, int npart)$/;"	f	signature:(idxtype *indices, idxtype* map, int n, int npart)
mapPartition	../mlrmcl1.2/Lib/metrics.c	/^int mapPartition(idxtype* part, idxtype nvtxs)$/;"	f	signature:(idxtype* part, idxtype nvtxs)
mapPartition	../mlrmcl1.2/Lib/proto.h	/^int mapPartition(idxtype*, idxtype);$/;"	p	signature:(idxtype*, idxtype)
matchType	../mlrmcl1.2/Lib/struct.h	/^	int matchType;$/;"	m	struct:optionsdef	access:public
math	../mlrmcl1.2/tools/evaluateClusters.py	/^import math$/;"	i
math	../mlrmcl1.2/tools/normMI.py	/^import math$/;"	i
matrixRowReorder	../nlibs/CSR.cc	/^void CSR::matrixRowReorder(const int* ranks) const {$/;"	f	class:CSR	signature:(const int* ranks) const
matrixRowReorder	../nlibs/CSR.h	/^  void matrixRowReorder(const int* ranks) const;$/;"	p	struct:CSR	access:public	signature:(const int* ranks) const
matrixRowReorder	../pure_c_spmm/CSR.cc	/^void CSR::matrixRowReorder(const int* ranks) const {$/;"	f	class:CSR	signature:(const int* ranks) const
matrixRowReorder	../pure_c_spmm/CSR.h	/^  void matrixRowReorder(const int* ranks) const;$/;"	p	struct:CSR	access:public	signature:(const int* ranks) const
matrixdef	../mlrmcl1.2/Lib/struct.h	/^struct matrixdef{$/;"	s
matrixdef::adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype* adjncy;$/;"	m	struct:matrixdef	access:public
matrixdef::adjwgt	../mlrmcl1.2/Lib/struct.h	/^	wgttype* adjwgt; \/* array that stores weights of the$/;"	m	struct:matrixdef	access:public
matrixdef::adjwgtsum	../mlrmcl1.2/Lib/struct.h	/^	wgttype* adjwgtsum; \/* sum of adjacency weights of each node,$/;"	m	struct:matrixdef	access:public
matrixdef::attractors	../mlrmcl1.2/Lib/struct.h	/^	idxtype* attractors; \/* the row with the maximum weight in a$/;"	m	struct:matrixdef	access:public
matrixdef::currentSize	../mlrmcl1.2/Lib/struct.h	/^	int currentSize;$/;"	m	struct:matrixdef	access:public
matrixdef::maxwgt	../mlrmcl1.2/Lib/struct.h	/^	wgttype* maxwgt; \/* max wgt of each column, assigned only$/;"	m	struct:matrixdef	access:public
matrixdef::nnz	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs, nnz; \/* nnz stands for number of non-zero$/;"	m	struct:matrixdef	access:public
matrixdef::nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs, nnz; \/* nnz stands for number of non-zero$/;"	m	struct:matrixdef	access:public
matrixdef::rmap	../mlrmcl1.2/Lib/struct.h	/^	idxtype* rmap; \/* This is for mis_coarsen *\/$/;"	m	struct:matrixdef	access:public
matrixdef::sizeIncrement	../mlrmcl1.2/Lib/struct.h	/^	int sizeIncrement;$/;"	m	struct:matrixdef	access:public
matrixdef::xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype* xadj; \/* xadj[i+1]-xadj[i] gives the number of$/;"	m	struct:matrixdef	access:public
max	../mlrmcl1.2/Lib/struct.h	/^  float max[2][MAXNCON];$/;"	m	struct:vpwgtdef	access:public
maxSize	../mlrmcl1.2/tools/evaluateClusters.py	/^maxSize = int(args[6])$/;"	v
max_iters	../mlrmcl1.2/Lib/struct.h	/^	int max_iters;$/;"	m	struct:pagerankOptionsDef	access:public
maxcore	../mlrmcl1.2/Lib/struct.h	/^  int maxcore, ccore;$/;"	m	struct:workspacedef	access:public
maxgain	../mlrmcl1.2/Lib/struct.h	/^  int maxgain;$/;"	m	struct:PQueueType	access:public
maxnodes	../mlrmcl1.2/Lib/struct.h	/^  int maxnodes;$/;"	m	struct:PQueueType	access:public
maxvwgt	../mlrmcl1.2/Lib/struct.h	/^  int maxvwgt;			\/* The maximum allowed weight for a vertex *\/$/;"	m	struct:controldef	access:public
maxwgt	../mlrmcl1.2/Lib/struct.h	/^	wgttype* maxwgt; \/* max wgt of each column, assigned only$/;"	m	struct:matrixdef	access:public
meanp	../mlrmcl1.2/tools/evaluateClusters.py	/^	meanp = sumPvalues\/l$/;"	v
mergeBestClusters	../mlrmcl1.2/Lib/merge.c	/^void mergeBestClusters(ListGraph *cg, idxtype* part_mapper, int$/;"	f	signature:(ListGraph *cg, idxtype* part_mapper, int nparts, int mergeHeuristic)
mergeBestClusters	../mlrmcl1.2/Lib/proto.h	/^void mergeBestClusters(ListGraph*, idxtype*, int, int);$/;"	p	signature:(ListGraph*, idxtype*, int, int)
mergeLists	../mlrmcl1.2/Lib/merge.c	/^ListInt* mergeLists(const ListInt* al1, const ListWgt* wl1, $/;"	f	signature:(const ListInt* al1, const ListWgt* wl1, const ListInt* al2, const ListWgt* wl2, ListWgt** ret_wl, int univ_size)
mi	../mlrmcl1.2/tools/normMI.py	/^		mi = mi+t*u$/;"	v
mi	../mlrmcl1.2/tools/normMI.py	/^mi = 0 # mutual information$/;"	v
minSize	../mlrmcl1.2/tools/evaluateClusters.py	/^minSize = int(args[4])$/;"	v
mincut	../mlrmcl1.2/Lib/struct.h	/^  int mincut, minvol;$/;"	m	struct:graphdef	access:public
minvol	../mlrmcl1.2/Lib/struct.h	/^  int mincut, minvol;$/;"	m	struct:graphdef	access:public
mis_Coarsen2Way	../mlrmcl1.2/Lib/proto.h	/^Matrix** mis_Coarsen2Way(CtrlType *, GraphType*, int, int*);$/;"	p	signature:(CtrlType *, GraphType*, int, int*)
mis_coarsenType	../mlrmcl1.2/Lib/struct.h	/^	int mis_coarsenType;$/;"	m	struct:optionsdef	access:public
mis_projectFlow	../mlrmcl1.2/Lib/mlmcl.c	/^Matrix* mis_projectFlow(Matrix* Mc, idxtype* rmap, int nvtxs)$/;"	f	signature:(Matrix* Mc, idxtype* rmap, int nvtxs)
mlmcl	../mlrmcl1.2/Lib/mlmcl.c	/^void mlmcl(int* nvtxs, idxtype* xadj, idxtype* adjncy, idxtype$/;"	f	signature:(int* nvtxs, idxtype* xadj, idxtype* adjncy, idxtype *vwgt, idxtype* adjwgt, int* wgtflag, idxtype* indices, Options opt)
mlmcl	../mlrmcl1.2/Lib/proto.h	/^void mlmcl(int*, idxtype*, idxtype*, idxtype*, idxtype*, int*,$/;"	p	signature:(int*, idxtype*, idxtype*, idxtype*, idxtype*, int*, idxtype*, Options)
mlmclWithGraph	../mlrmcl1.2/Lib/mlmcl.c	/^void mlmclWithGraph(GraphType *graph,idxtype* indices,Options opt)$/;"	f	signature:(GraphType *graph,idxtype* indices,Options opt)
mm_clear_typecode	../nlibs/mm_io.h	83;"	d
mm_clear_typecode	../pure_c_spmm/mm_io.h	83;"	d
mm_initialize_typecode	../nlibs/mm_io.h	86;"	d
mm_initialize_typecode	../pure_c_spmm/mm_io.h	86;"	d
mm_is_array	../nlibs/mm_io.h	51;"	d
mm_is_array	../pure_c_spmm/mm_io.h	51;"	d
mm_is_complex	../nlibs/mm_io.h	53;"	d
mm_is_complex	../pure_c_spmm/mm_io.h	53;"	d
mm_is_coordinate	../nlibs/mm_io.h	49;"	d
mm_is_coordinate	../pure_c_spmm/mm_io.h	49;"	d
mm_is_dense	../nlibs/mm_io.h	50;"	d
mm_is_dense	../pure_c_spmm/mm_io.h	50;"	d
mm_is_general	../nlibs/mm_io.h	59;"	d
mm_is_general	../pure_c_spmm/mm_io.h	59;"	d
mm_is_hermitian	../nlibs/mm_io.h	61;"	d
mm_is_hermitian	../pure_c_spmm/mm_io.h	61;"	d
mm_is_integer	../nlibs/mm_io.h	56;"	d
mm_is_integer	../pure_c_spmm/mm_io.h	56;"	d
mm_is_matrix	../nlibs/mm_io.h	46;"	d
mm_is_matrix	../pure_c_spmm/mm_io.h	46;"	d
mm_is_pattern	../nlibs/mm_io.h	55;"	d
mm_is_pattern	../pure_c_spmm/mm_io.h	55;"	d
mm_is_real	../nlibs/mm_io.h	54;"	d
mm_is_real	../pure_c_spmm/mm_io.h	54;"	d
mm_is_skew	../nlibs/mm_io.h	60;"	d
mm_is_skew	../pure_c_spmm/mm_io.h	60;"	d
mm_is_sparse	../nlibs/mm_io.h	48;"	d
mm_is_sparse	../pure_c_spmm/mm_io.h	48;"	d
mm_is_symmetric	../nlibs/mm_io.h	58;"	d
mm_is_symmetric	../pure_c_spmm/mm_io.h	58;"	d
mm_is_valid	../nlibs/mm_io.cc	/^int mm_is_valid ( MM_typecode matcode )$/;"	f	signature:( MM_typecode matcode )
mm_is_valid	../nlibs/mm_io.h	/^int mm_is_valid ( MM_typecode matcode );$/;"	p	signature:( MM_typecode matcode )
mm_is_valid	../pure_c_spmm/mm_io.cc	/^int mm_is_valid ( MM_typecode matcode )$/;"	f	signature:( MM_typecode matcode )
mm_is_valid	../pure_c_spmm/mm_io.h	/^int mm_is_valid ( MM_typecode matcode );$/;"	p	signature:( MM_typecode matcode )
mm_read_banner	../nlibs/mm_io.cc	/^int mm_read_banner ( FILE *f, MM_typecode *matcode )$/;"	f	signature:( FILE *f, MM_typecode *matcode )
mm_read_banner	../nlibs/mm_io.h	/^int mm_read_banner ( FILE *f, MM_typecode *matcode );$/;"	p	signature:( FILE *f, MM_typecode *matcode )
mm_read_banner	../pure_c_spmm/mm_io.cc	/^int mm_read_banner ( FILE *f, MM_typecode *matcode )$/;"	f	signature:( FILE *f, MM_typecode *matcode )
mm_read_banner	../pure_c_spmm/mm_io.h	/^int mm_read_banner ( FILE *f, MM_typecode *matcode );$/;"	p	signature:( FILE *f, MM_typecode *matcode )
mm_read_mtx_array_size	../nlibs/mm_io.cc	/^int mm_read_mtx_array_size ( FILE *f, int *M, int *N )$/;"	f	signature:( FILE *f, int *M, int *N )
mm_read_mtx_array_size	../nlibs/mm_io.h	/^int mm_read_mtx_array_size ( FILE *f, int *M, int *N );$/;"	p	signature:( FILE *f, int *M, int *N )
mm_read_mtx_array_size	../pure_c_spmm/mm_io.cc	/^int mm_read_mtx_array_size ( FILE *f, int *M, int *N )$/;"	f	signature:( FILE *f, int *M, int *N )
mm_read_mtx_array_size	../pure_c_spmm/mm_io.h	/^int mm_read_mtx_array_size ( FILE *f, int *M, int *N );$/;"	p	signature:( FILE *f, int *M, int *N )
mm_read_mtx_crd	../nlibs/mm_io.cc	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J,$/;"	f	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, MM_typecode *matcode)
mm_read_mtx_crd	../nlibs/mm_io.h	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J,$/;"	p	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, MM_typecode *matcode)
mm_read_mtx_crd	../pure_c_spmm/mm_io.cc	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J,$/;"	f	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, MM_typecode *matcode)
mm_read_mtx_crd	../pure_c_spmm/mm_io.h	/^int mm_read_mtx_crd(char *fname, int *M, int *N, int *nz, int **I, int **J,$/;"	p	signature:(char *fname, int *M, int *N, int *nz, int **I, int **J, double **val, MM_typecode *matcode)
mm_read_mtx_crd_data	../nlibs/mm_io.cc	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	f	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_read_mtx_crd_data	../nlibs/mm_io.h	/^int mm_read_mtx_crd_data ( FILE *f, int M, int N, int nz, int I[], int J[],$/;"	p	signature:( FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode )
mm_read_mtx_crd_data	../pure_c_spmm/mm_io.cc	/^int mm_read_mtx_crd_data(FILE *f, int M, int N, int nz, int I[], int J[],$/;"	f	signature:(FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_read_mtx_crd_data	../pure_c_spmm/mm_io.h	/^int mm_read_mtx_crd_data ( FILE *f, int M, int N, int nz, int I[], int J[],$/;"	p	signature:( FILE *f, int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode )
mm_read_mtx_crd_entry	../nlibs/mm_io.cc	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J,$/;"	f	signature:(FILE *f, int *I, int *J, double *real, double *imag, MM_typecode matcode)
mm_read_mtx_crd_entry	../nlibs/mm_io.h	/^int mm_read_mtx_crd_entry ( FILE *f, int *I, int *J, double *real, double *img,$/;"	p	signature:( FILE *f, int *I, int *J, double *real, double *img, MM_typecode matcode )
mm_read_mtx_crd_entry	../pure_c_spmm/mm_io.cc	/^int mm_read_mtx_crd_entry(FILE *f, int *I, int *J,$/;"	f	signature:(FILE *f, int *I, int *J, double *real, double *imag, MM_typecode matcode)
mm_read_mtx_crd_entry	../pure_c_spmm/mm_io.h	/^int mm_read_mtx_crd_entry ( FILE *f, int *I, int *J, double *real, double *img,$/;"	p	signature:( FILE *f, int *I, int *J, double *real, double *img, MM_typecode matcode )
mm_read_mtx_crd_size	../nlibs/mm_io.cc	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz )$/;"	f	signature:(FILE *f, int *M, int *N, int *nz )
mm_read_mtx_crd_size	../nlibs/mm_io.h	/^int mm_read_mtx_crd_size ( FILE *f, int *M, int *N, int *nz );$/;"	p	signature:( FILE *f, int *M, int *N, int *nz )
mm_read_mtx_crd_size	../pure_c_spmm/mm_io.cc	/^int mm_read_mtx_crd_size(FILE *f, int *M, int *N, int *nz )$/;"	f	signature:(FILE *f, int *M, int *N, int *nz )
mm_read_mtx_crd_size	../pure_c_spmm/mm_io.h	/^int mm_read_mtx_crd_size ( FILE *f, int *M, int *N, int *nz );$/;"	p	signature:( FILE *f, int *M, int *N, int *nz )
mm_read_unsymmetric_sparse	../nlibs/mm_io.cc	/^int mm_read_unsymmetric_sparse(const char *fname, int *M_, int *N_, int *nz_,$/;"	f	signature:(const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_)
mm_read_unsymmetric_sparse	../nlibs/mm_io.h	/^extern "C" int mm_read_unsymmetric_sparse ( const char *fname, int *M_, int *N_, int *nz_,$/;"	p	signature:( const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_ )
mm_read_unsymmetric_sparse	../pure_c_spmm/mm_io.cc	/^int mm_read_unsymmetric_sparse(const char *fname, int *M_, int *N_, int *nz_,$/;"	f	signature:(const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_)
mm_read_unsymmetric_sparse	../pure_c_spmm/mm_io.h	/^extern "C" int mm_read_unsymmetric_sparse ( const char *fname, int *M_, int *N_, int *nz_,$/;"	p	signature:( const char *fname, int *M_, int *N_, int *nz_, double **val_, int **I_, int **J_ )
mm_set_array	../nlibs/mm_io.h	68;"	d
mm_set_array	../pure_c_spmm/mm_io.h	68;"	d
mm_set_complex	../nlibs/mm_io.h	72;"	d
mm_set_complex	../pure_c_spmm/mm_io.h	72;"	d
mm_set_coordinate	../nlibs/mm_io.h	67;"	d
mm_set_coordinate	../pure_c_spmm/mm_io.h	67;"	d
mm_set_dense	../nlibs/mm_io.h	69;"	d
mm_set_dense	../pure_c_spmm/mm_io.h	69;"	d
mm_set_general	../nlibs/mm_io.h	79;"	d
mm_set_general	../pure_c_spmm/mm_io.h	79;"	d
mm_set_hermitian	../nlibs/mm_io.h	81;"	d
mm_set_hermitian	../pure_c_spmm/mm_io.h	81;"	d
mm_set_integer	../nlibs/mm_io.h	75;"	d
mm_set_integer	../pure_c_spmm/mm_io.h	75;"	d
mm_set_matrix	../nlibs/mm_io.h	66;"	d
mm_set_matrix	../pure_c_spmm/mm_io.h	66;"	d
mm_set_pattern	../nlibs/mm_io.h	74;"	d
mm_set_pattern	../pure_c_spmm/mm_io.h	74;"	d
mm_set_real	../nlibs/mm_io.h	73;"	d
mm_set_real	../pure_c_spmm/mm_io.h	73;"	d
mm_set_skew	../nlibs/mm_io.h	80;"	d
mm_set_skew	../pure_c_spmm/mm_io.h	80;"	d
mm_set_sparse	../nlibs/mm_io.h	70;"	d
mm_set_sparse	../pure_c_spmm/mm_io.h	70;"	d
mm_set_symmetric	../nlibs/mm_io.h	78;"	d
mm_set_symmetric	../pure_c_spmm/mm_io.h	78;"	d
mm_strdup	../nlibs/mm_io.cc	/^char *mm_strdup ( const char *s )$/;"	f	signature:( const char *s )
mm_strdup	../nlibs/mm_io.h	/^char *mm_strdup ( const char *s );$/;"	p	signature:( const char *s )
mm_strdup	../pure_c_spmm/mm_io.cc	/^char *mm_strdup ( const char *s )$/;"	f	signature:( const char *s )
mm_strdup	../pure_c_spmm/mm_io.h	/^char *mm_strdup ( const char *s );$/;"	p	signature:( const char *s )
mm_typecode_to_str	../nlibs/mm_io.cc	/^char *mm_typecode_to_str ( MM_typecode matcode )$/;"	f	signature:( MM_typecode matcode )
mm_typecode_to_str	../nlibs/mm_io.h	/^char *mm_typecode_to_str ( MM_typecode matcode );$/;"	p	signature:( MM_typecode matcode )
mm_typecode_to_str	../pure_c_spmm/mm_io.cc	/^char *mm_typecode_to_str ( MM_typecode matcode )$/;"	f	signature:( MM_typecode matcode )
mm_typecode_to_str	../pure_c_spmm/mm_io.h	/^char *mm_typecode_to_str ( MM_typecode matcode );$/;"	p	signature:( MM_typecode matcode )
mm_write_banner	../nlibs/mm_io.cc	/^int mm_write_banner ( FILE *f, MM_typecode matcode )$/;"	f	signature:( FILE *f, MM_typecode matcode )
mm_write_banner	../nlibs/mm_io.h	/^int mm_write_banner ( FILE *f, MM_typecode matcode );$/;"	p	signature:( FILE *f, MM_typecode matcode )
mm_write_banner	../pure_c_spmm/mm_io.cc	/^int mm_write_banner ( FILE *f, MM_typecode matcode )$/;"	f	signature:( FILE *f, MM_typecode matcode )
mm_write_banner	../pure_c_spmm/mm_io.h	/^int mm_write_banner ( FILE *f, MM_typecode matcode );$/;"	p	signature:( FILE *f, MM_typecode matcode )
mm_write_mtx_array_size	../nlibs/mm_io.cc	/^int mm_write_mtx_array_size(FILE *f, int M, int N)$/;"	f	signature:(FILE *f, int M, int N)
mm_write_mtx_array_size	../nlibs/mm_io.h	/^int mm_write_mtx_array_size ( FILE *f, int M, int N );$/;"	p	signature:( FILE *f, int M, int N )
mm_write_mtx_array_size	../pure_c_spmm/mm_io.cc	/^int mm_write_mtx_array_size(FILE *f, int M, int N)$/;"	f	signature:(FILE *f, int M, int N)
mm_write_mtx_array_size	../pure_c_spmm/mm_io.h	/^int mm_write_mtx_array_size ( FILE *f, int M, int N );$/;"	p	signature:( FILE *f, int M, int N )
mm_write_mtx_crd	../nlibs/mm_io.cc	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	f	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_write_mtx_crd	../nlibs/mm_io.h	/^int mm_write_mtx_crd ( char fname[], int M, int N, int nz, int I[], int J[],$/;"	p	signature:( char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode )
mm_write_mtx_crd	../pure_c_spmm/mm_io.cc	/^int mm_write_mtx_crd(char fname[], int M, int N, int nz, int I[], int J[],$/;"	f	signature:(char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode)
mm_write_mtx_crd	../pure_c_spmm/mm_io.h	/^int mm_write_mtx_crd ( char fname[], int M, int N, int nz, int I[], int J[],$/;"	p	signature:( char fname[], int M, int N, int nz, int I[], int J[], double val[], MM_typecode matcode )
mm_write_mtx_crd_size	../nlibs/mm_io.cc	/^int mm_write_mtx_crd_size ( FILE *f, int M, int N, int nz )$/;"	f	signature:( FILE *f, int M, int N, int nz )
mm_write_mtx_crd_size	../nlibs/mm_io.h	/^int mm_write_mtx_crd_size ( FILE *f, int M, int N, int nz );$/;"	p	signature:( FILE *f, int M, int N, int nz )
mm_write_mtx_crd_size	../pure_c_spmm/mm_io.cc	/^int mm_write_mtx_crd_size ( FILE *f, int M, int N, int nz )$/;"	f	signature:( FILE *f, int M, int N, int nz )
mm_write_mtx_crd_size	../pure_c_spmm/mm_io.h	/^int mm_write_mtx_crd_size ( FILE *f, int M, int N, int nz );$/;"	p	signature:( FILE *f, int M, int N, int nz )
mmdelm	../mlrmcl1.2/Lib/rename.h	313;"	d
mmdint	../mlrmcl1.2/Lib/rename.h	314;"	d
mmdnum	../mlrmcl1.2/Lib/rename.h	315;"	d
mmdupd	../mlrmcl1.2/Lib/rename.h	316;"	d
mustfree	../mlrmcl1.2/Lib/struct.h	/^  int mustfree;$/;"	m	struct:PQueueType	access:public
my_AllocateWorkSpace	../mlrmcl1.2/Lib/memory.c	/^void my_AllocateWorkSpace(CtrlType *ctrl, GraphType *graph )$/;"	f	signature:(CtrlType *ctrl, GraphType *graph )
my_AllocateWorkSpace	../mlrmcl1.2/Lib/proto.h	/^void my_AllocateWorkSpace(CtrlType *ctrl, GraphType *graph);$/;"	p	signature:(CtrlType *ctrl, GraphType *graph)
my_CreateCoarseGraph	../mlrmcl1.2/Lib/ccgraph.c	/^void my_CreateCoarseGraph(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph, int cnvtxs, idxtype *match, idxtype *perm)
my_CreateCoarseGraph	../mlrmcl1.2/Lib/proto.h	/^void my_CreateCoarseGraph(CtrlType *, GraphType *, int, idxtype *, idxtype *);$/;"	p	signature:(CtrlType *, GraphType *, int, idxtype *, idxtype *)
my_Match_HEMN	../mlrmcl1.2/Lib/match.c	/^void my_Match_HEMN(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
my_Match_HEMN	../mlrmcl1.2/Lib/proto.h	/^void my_Match_HEMN(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
my_Match_PowerLaw_FC	../mlrmcl1.2/Lib/match.c	/^void my_Match_PowerLaw_FC(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
my_Match_PowerLaw_FC	../mlrmcl1.2/Lib/proto.h	/^void my_Match_PowerLaw_FC(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
my_Match_RM	../mlrmcl1.2/Lib/match.c	/^void my_Match_RM(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
my_Match_RM	../mlrmcl1.2/Lib/proto.h	/^void my_Match_RM(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
my_Match_SHEMN	../mlrmcl1.2/Lib/match.c	/^void my_Match_SHEMN(CtrlType *ctrl, GraphType *graph)$/;"	f	signature:(CtrlType *ctrl, GraphType *graph)
my_Match_SHEMN	../mlrmcl1.2/Lib/proto.h	/^void my_Match_SHEMN(CtrlType *, GraphType *);$/;"	p	signature:(CtrlType *, GraphType *)
my_SetUpCoarseGraph	../mlrmcl1.2/Lib/ccgraph.c	/^GraphType* my_SetUpCoarseGraph(GraphType *graph, int cnvtxs)$/;"	f	signature:(GraphType *graph, int cnvtxs)
my_SetUpCoarseGraph	../mlrmcl1.2/Lib/proto.h	/^GraphType *my_SetUpCoarseGraph(GraphType *, int);$/;"	p	signature:(GraphType *, int)
my_SetUpGraph	../mlrmcl1.2/Lib/graph.c	/^void my_SetUpGraph(GraphType *graph, int nvtxs, idxtype* xadj,$/;"	f	signature:(GraphType *graph, int nvtxs, idxtype* xadj, idxtype* adjncy, idxtype* vwgt, idxtype* adjwgt, int wgtflag, int isOrgGraph )
my_SetUpGraph	../mlrmcl1.2/Lib/proto.h	/^void my_SetUpGraph(GraphType*, int, idxtype*, idxtype*, idxtype*,$/;"	p	signature:(GraphType*, int, idxtype*, idxtype*, idxtype*, idxtype*, int, int)
my_WriteMappedPartition	../mlrmcl1.2/Lib/io.c	/^void my_WriteMappedPartition(const char *fname, idxtype *part, idxtype$/;"	f	signature:(const char *fname, idxtype *part, idxtype *nodeMap, int n)
my_WriteMappedPartition	../mlrmcl1.2/Lib/proto.h	/^void my_WriteMappedPartition(const char *, idxtype *, idxtype *, int);$/;"	p	signature:(const char *, idxtype *, idxtype *, int)
my_WritePartition	../mlrmcl1.2/Lib/io.c	/^void my_WritePartition(const char *fname, idxtype *part, int n, float gamma)$/;"	f	signature:(const char *fname, idxtype *part, int n, float gamma)
my_WritePartition	../mlrmcl1.2/Lib/proto.h	/^void my_WritePartition(const char *, idxtype *, int, float);$/;"	p	signature:(const char *, idxtype *, int, float)
my_WritePartitionAddOne	../mlrmcl1.2/Lib/io.c	/^void my_WritePartitionAddOne(const char *fname, idxtype *part, int n)$/;"	f	signature:(const char *fname, idxtype *part, int n)
my_WritePartitionAddOne	../mlrmcl1.2/Lib/proto.h	/^void my_WritePartitionAddOne(const char *, idxtype *, int);$/;"	p	signature:(const char *, idxtype *, int)
n	../mlrmcl1.2/tools/evaluateClusters.py	/^		n = float(gtClusterSizes[gtCluster])$/;"	v
nbnd	../mlrmcl1.2/Lib/struct.h	/^  int nbnd;$/;"	m	struct:graphdef	access:public
ncon	../mlrmcl1.2/Lib/struct.h	/^  int ncon;			\/* The # of constrains *\/ $/;"	m	struct:graphdef	access:public
ncutify	../mlrmcl1.2/Lib/struct.h	/^	int ncutify;$/;"	m	struct:optionsdef	access:public
ncutifyWeights	../mlrmcl1.2/Lib/mclutils.c	/^void ncutifyWeights(Matrix* M, int hasWeightsAlready, int ncutify)$/;"	f	signature:(Matrix* M, int hasWeightsAlready, int ncutify)
ncutifyWeights	../mlrmcl1.2/Lib/proto.h	/^void ncutifyWeights(Matrix*, int, int);$/;"	p	signature:(Matrix*, int, int)
ndegrees	../mlrmcl1.2/Lib/struct.h	/^ int ndegrees;          	\/* The number of different ext-degrees *\/$/;"	m	struct:rinfodef	access:public
ndegrees	../mlrmcl1.2/Lib/struct.h	/^ int ndegrees;          	\/* The number of different ext-degrees *\/$/;"	m	struct:vrinfodef	access:public
ned	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed, ned;$/;"	m	struct:vedegreedef	access:public
nedges	../mlrmcl1.2/Lib/struct.h	/^	int nedges;$/;"	m	struct:listgraphdef	access:public
nedges	../mlrmcl1.2/Lib/struct.h	/^  int nvtxs, nedges;		\/* The # of vertices and edges in the graph *\/$/;"	m	struct:graphdef	access:public
next	../mlrmcl1.2/Lib/struct.h	/^  struct ListNodeType *prev, *next;     \/* It's a doubly-linked list *\/$/;"	m	struct:ListNodeType	typeref:struct:ListNodeType::	access:public
ngainspan	../mlrmcl1.2/Lib/struct.h	/^  int pgainspan, ngainspan;     \/* plus and negative gain span *\/$/;"	m	struct:PQueueType	access:public
nid	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
nmaxvwgt	../mlrmcl1.2/Lib/struct.h	/^  float nmaxvwgt;		\/* The maximum allowed weight for a vertex for each constrain *\/$/;"	m	struct:controldef	access:public
nmi	../mlrmcl1.2/tools/normMI.py	/^nmi = mi*2\/(h_gtc+h_cluster)$/;"	v
nnodes	../mlrmcl1.2/Lib/struct.h	/^  int nnodes;$/;"	m	struct:PQueueType	access:public
nnz	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs, nnz; \/* nnz stands for number of non-zero$/;"	m	struct:matrixdef	access:public
nnz	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
nnz	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
nnz	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
nnz	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
noOfUnique	../mlrmcl1.2/Lib/mclutils.c	/^int noOfUnique(idxtype* attrs,int n, idxtype* hashtable)$/;"	f	signature:(idxtype* attrs,int n, idxtype* hashtable)
noOfUnique	../mlrmcl1.2/Lib/proto.h	/^int noOfUnique(idxtype*, int, idxtype*);$/;"	p	signature:(idxtype*, int, idxtype*)
nodeId	../mlrmcl1.2/tools/evaluateClusters.py	/^	nodeId = int(tokens[0])$/;"	v
nodes	../mlrmcl1.2/Lib/struct.h	/^  ListNodeType *nodes;$/;"	m	struct:PQueueType	access:public
norm	../mlrmcl1.2/tools/evaluateClusters.py	/^	norm = inputNormalizer$/;"	v
norm	../mlrmcl1.2/tools/evaluateClusters.py	/^	norm = sumOfMs$/;"	v
normalizeColumns	../mlrmcl1.2/Lib/mclutils.c	/^void normalizeColumns(Matrix* M, int hasWeightsAlready, int$/;"	f	signature:(Matrix* M, int hasWeightsAlready, int hasSumsAlready)
normalizeColumns	../mlrmcl1.2/Lib/proto.h	/^void normalizeColumns(Matrix*, int, int);$/;"	p	signature:(Matrix*, int, int)
npwgts	../mlrmcl1.2/Lib/struct.h	/^  float *npwgts;		\/* The normalized partition weights *\/$/;"	m	struct:graphdef	access:public
nrinfo	../mlrmcl1.2/Lib/struct.h	/^  NRInfoType *nrinfo;$/;"	m	struct:graphdef	access:public
nrinfodef	../mlrmcl1.2/Lib/struct.h	/^struct nrinfodef {$/;"	s
nrinfodef::edegrees	../mlrmcl1.2/Lib/struct.h	/^ idxtype edegrees[2];  $/;"	m	struct:nrinfodef	access:public
nseps	../mlrmcl1.2/Lib/struct.h	/^  int nseps;			\/* The number of separators to be found during multiple bisections *\/$/;"	m	struct:controldef	access:public
nthreads	../nlibs/omp_csr_kernel.cc	/^const int nthreads = 8;$/;"	v
nthreads	../pure_c_spmm/omp_csr_kernel.cc	/^const int nthreads = 8;$/;"	v
nthreads	../pure_c_spmm/save/omp_csr_kernel.cc	/^const int nthreads = 8;$/;"	v
numDescendants	../mlrmcl1.2/Lib/struct.h	/^  idxtype *numDescendants;$/;"	m	struct:graphdef	access:public
numEdges	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	numEdges=int(args[5])$/;"	v
numEdges	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	numEdges=wordcount(args[1])$/;"	v
numHashes	../mlrmcl1.2/Lib/struct.h	/^	int numHashes;$/;"	m	struct:hashtabledef	access:public
numNodes	../mlrmcl1.2/Lib/struct.h	/^	int numNodes;$/;"	m	struct:hashtabledef	access:public
numNodes	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^numNodes = args[2]$/;"	v
numNodes	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^numNodes = int(numNodes)$/;"	v
numPrunedEdges	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^numPrunedEdges = 0$/;"	v
numWithoutAttractors	../mlrmcl1.2/Lib/mclutils.c	/^int numWithoutAttractors(Matrix* M)$/;"	f	signature:(Matrix* M)
numWithoutAttractors	../mlrmcl1.2/Lib/proto.h	/^int numWithoutAttractors(Matrix*);$/;"	p	signature:(Matrix*)
num_last_iter	../mlrmcl1.2/Lib/struct.h	/^	int num_last_iter;$/;"	m	struct:optionsdef	access:public
numberOfMatchingEdges	../mlrmcl1.2/Lib/proto.h	/^int numberOfMatchingEdges(GraphType*, GraphType*);$/;"	p	signature:(GraphType*, GraphType*)
nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs, nnz; \/* nnz stands for number of non-zero$/;"	m	struct:matrixdef	access:public
nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs;$/;"	m	struct:listgraphdef	access:public
nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs;$/;"	m	struct:threadData	access:public
nvtxs	../mlrmcl1.2/Lib/struct.h	/^  int nvtxs, nedges;		\/* The # of vertices and edges in the graph *\/$/;"	m	struct:graphdef	access:public
nvwgt	../mlrmcl1.2/Lib/struct.h	/^  float *nvwgt;			\/* Normalized vertex weights *\/$/;"	m	struct:graphdef	access:public
oflags	../mlrmcl1.2/Lib/struct.h	/^  int oflags;$/;"	m	struct:controldef	access:public
omp_CSR_IC_nnzC	../nlibs/omp_csr_kernel.cc	/^void omp_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	f	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, thread_data_t thread_datas[], int* IC, int& nnzC)
omp_CSR_IC_nnzC	../pure_c_spmm/omp_csr_kernel.cc	/^void omp_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	f	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, thread_data_t thread_datas[], int* IC, int& nnzC)
omp_CSR_IC_nnzC	../pure_c_spmm/save/omp_csr_kernel.cc	/^void omp_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	f	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, thread_data_t thread_datas[], int* IC, int& nnzC)
omp_CSR_SpMM	../nlibs/cpu_csr_kernel.h	/^void omp_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
omp_CSR_SpMM	../nlibs/omp_csr_kernel.cc	/^void omp_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
omp_CSR_SpMM	../pure_c_spmm/cpu_csr_kernel.h	/^void omp_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
omp_CSR_SpMM	../pure_c_spmm/omp_csr_kernel.cc	/^void omp_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
omp_CSR_SpMM	../pure_c_spmm/save/omp_csr_kernel.cc	/^void omp_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
omp_spmm	../nlibs/CSR.cc	/^CSR CSR::omp_spmm(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
omp_spmm	../nlibs/CSR.h	/^  CSR omp_spmm(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
omp_spmm	../pure_c_spmm/CSR.cc	/^CSR CSR::omp_spmm(const CSR& B) {$/;"	f	class:CSR	signature:(const CSR& B)
omp_spmm	../pure_c_spmm/CSR.h	/^  CSR omp_spmm(const CSR& B);$/;"	p	struct:CSR	access:public	signature:(const CSR& B)
optionsdef	../mlrmcl1.2/Lib/struct.h	/^struct optionsdef{$/;"	s
optionsdef::coarsenTo	../mlrmcl1.2/Lib/struct.h	/^	int coarsenTo;$/;"	m	struct:optionsdef	access:public
optionsdef::dpr_threshold	../mlrmcl1.2/Lib/struct.h	/^	float dpr_threshold;$/;"	m	struct:optionsdef	access:public
optionsdef::exact	../mlrmcl1.2/Lib/struct.h	/^	int exact;$/;"	m	struct:optionsdef	access:public
optionsdef::gamma	../mlrmcl1.2/Lib/struct.h	/^	float gamma;$/;"	m	struct:optionsdef	access:public
optionsdef::hubPct	../mlrmcl1.2/Lib/struct.h	/^	float hubPct;$/;"	m	struct:optionsdef	access:public
optionsdef::hubRemoval	../mlrmcl1.2/Lib/struct.h	/^	int hubRemoval;$/;"	m	struct:optionsdef	access:public
optionsdef::iter_per_level	../mlrmcl1.2/Lib/struct.h	/^	int iter_per_level;$/;"	m	struct:optionsdef	access:public
optionsdef::k	../mlrmcl1.2/Lib/struct.h	/^	int k;$/;"	m	struct:optionsdef	access:public
optionsdef::matchType	../mlrmcl1.2/Lib/struct.h	/^	int matchType;$/;"	m	struct:optionsdef	access:public
optionsdef::mis_coarsenType	../mlrmcl1.2/Lib/struct.h	/^	int mis_coarsenType;$/;"	m	struct:optionsdef	access:public
optionsdef::ncutify	../mlrmcl1.2/Lib/struct.h	/^	int ncutify;$/;"	m	struct:optionsdef	access:public
optionsdef::num_last_iter	../mlrmcl1.2/Lib/struct.h	/^	int num_last_iter;$/;"	m	struct:optionsdef	access:public
optionsdef::penalty_power	../mlrmcl1.2/Lib/struct.h	/^	float penalty_power; \/\/ used in transformAdj$/;"	m	struct:optionsdef	access:public
optionsdef::transformAdj	../mlrmcl1.2/Lib/struct.h	/^	int transformAdj;$/;"	m	struct:optionsdef	access:public
optype	../mlrmcl1.2/Lib/struct.h	/^  int optype;			\/* Type of operation *\/$/;"	m	struct:controldef	access:public
os	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^import os$/;"	i
outClusters	../mlrmcl1.2/tools/evaluateClusters.py	/^outClusters = converttoclusterlists(args[1])$/;"	v
outLine	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^		outLine = [str(col_id)]$/;"	v
output	../nlibs/COO.cc	/^void COO::output(const char* msg) {$/;"	f	class:COO	signature:(const char* msg)
output	../nlibs/COO.h	/^	void output(const char* msg);$/;"	p	class:COO	access:public	signature:(const char* msg)
output	../nlibs/CSR.h	/^  void output(const char* msg) const {$/;"	f	struct:CSR	access:public	signature:(const char* msg) const
output	../pure_c_spmm/COO.cc	/^void COO::output(const char* msg) {$/;"	f	class:COO	signature:(const char* msg)
output	../pure_c_spmm/COO.h	/^	void output(const char* msg);$/;"	p	class:COO	access:public	signature:(const char* msg)
output	../pure_c_spmm/CSR.h	/^  void output(const char* msg) const {$/;"	f	struct:CSR	access:public	signature:(const char* msg) const
pad_data	../nlibs/cpu_csr_kernel.h	/^  char pad_data[LEVEL1_DCACHE_LINESIZE];$/;"	m	struct:thread_data_t	access:public
pad_data	../pure_c_spmm/cpu_csr_kernel.h	/^  char pad_data[LEVEL1_DCACHE_LINESIZE];$/;"	m	struct:thread_data_t	access:public
pagerank	../mlrmcl1.2/Lib/proto.h	/^wgttype* pagerank(GraphType*, PageRankOptions, Matrix *M = NULL); $/;"	p	signature:(GraphType*, PageRankOptions, Matrix *M = NULL)
pagerank	../mlrmcl1.2/Lib/struct.h	/^  wgttype *pagerank;$/;"	m	struct:graphdef	access:public
pagerankOptionsDef	../mlrmcl1.2/Lib/struct.h	/^struct pagerankOptionsDef{$/;"	s
pagerankOptionsDef::alpha	../mlrmcl1.2/Lib/struct.h	/^	wgttype alpha; \/\/ random jump probability.$/;"	m	struct:pagerankOptionsDef	access:public
pagerankOptionsDef::convergeThreshold	../mlrmcl1.2/Lib/struct.h	/^	wgttype convergeThreshold;$/;"	m	struct:pagerankOptionsDef	access:public
pagerankOptionsDef::max_iters	../mlrmcl1.2/Lib/struct.h	/^	int max_iters;$/;"	m	struct:pagerankOptionsDef	access:public
penalty_power	../mlrmcl1.2/Lib/struct.h	/^	float penalty_power; \/\/ used in transformAdj$/;"	m	struct:optionsdef	access:public
permArrays	../mlrmcl1.2/tools/evaluateClusters.py	/^permArrays = {}$/;"	v
permuteDegreeOrder	../mlrmcl1.2/Lib/proto.h	/^void permuteDegreeOrder(int, idxtype*, idxtype*);$/;"	p	signature:(int, idxtype*, idxtype*)
permuteDegreeOrder	../mlrmcl1.2/Lib/util.c	/^void permuteDegreeOrder(int n, idxtype *p, idxtype *xadj)$/;"	f	signature:(int n, idxtype *p, idxtype *xadj)
permuteRowsAndColumns	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* permuteRowsAndColumns(Matrix *M, idxtype* rowPerm, idxtype* colPerm)$/;"	f	signature:(Matrix *M, idxtype* rowPerm, idxtype* colPerm)
permuteRowsAndColumns	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* permuteRowsAndColumns(Matrix* M, idxtype* perm)$/;"	f	signature:(Matrix* M, idxtype* perm)
permuteRowsAndColumns	../mlrmcl1.2/Lib/proto.h	/^Matrix* permuteRowsAndColumns(Matrix*, idxtype*, idxtype*);$/;"	p	signature:(Matrix*, idxtype*, idxtype*)
pfactor	../mlrmcl1.2/Lib/struct.h	/^  int pfactor;			\/* .1*prunning factor *\/$/;"	m	struct:controldef	access:public
pgainspan	../mlrmcl1.2/Lib/struct.h	/^  int pgainspan, ngainspan;     \/* plus and negative gain span *\/$/;"	m	struct:PQueueType	access:public
pid	../mlrmcl1.2/Lib/struct.h	/^  idxtype pid;$/;"	m	struct:edegreedef	access:public
pid	../mlrmcl1.2/Lib/struct.h	/^  idxtype pid;$/;"	m	struct:vedegreedef	access:public
pmat	../mlrmcl1.2/Lib/struct.h	/^  idxtype *pmat;			\/* An array of k^2 used for eliminating domain $/;"	m	struct:workspacedef	access:public
prec	../mlrmcl1.2/tools/evaluateClusters.py	/^		prec = m\/M$/;"	v
prev	../mlrmcl1.2/Lib/struct.h	/^  struct ListNodeType *prev, *next;     \/* It's a doubly-linked list *\/$/;"	m	struct:ListNodeType	typeref:struct:ListNodeType::ListNodeType	access:public
printHistogram	../mlrmcl1.2/Lib/io.c	/^void printHistogram(idxtype* hist, int maxDegree, FILE* fp)$/;"	f	signature:(idxtype* hist, int maxDegree, FILE* fp)
printHistogram	../mlrmcl1.2/Lib/proto.h	/^void printHistogram(idxtype*, int, FILE*);$/;"	p	signature:(idxtype*, int, FILE*)
printRow	../mlrmcl1.2/Lib/mclutils.c	/^void printRow(Matrix *M, int row)$/;"	f	signature:(Matrix *M, int row)
printRow	../mlrmcl1.2/Lib/proto.h	/^void printRow(Matrix*, int);$/;"	p	signature:(Matrix*, int)
print_help	../mlrmcl1.2/Programs/mergeClusters.c	/^void print_help(const char * program_name)$/;"	f	signature:(const char * program_name)
print_help	../mlrmcl1.2/Programs/mlrmcl.c	/^void print_help(char program_name[])$/;"	f	signature:(char program_name[])
print_help	../mlrmcl1.2/Programs/ncut.c	/^void print_help(char program_name[])$/;"	f	signature:(char program_name[])
print_help	../mlrmcl1.2/Programs/nrmcl.c	/^void print_help(char program_name[])$/;"	f	signature:(char program_name[])
propagateFlow	../mlrmcl1.2/Lib/mlmcl.c	/^Matrix* propagateFlow(Matrix* cm, GraphType* cgraph, GraphType*$/;"	f	signature:(Matrix* cm, GraphType* cgraph, GraphType* rgraph, int nnzRefinedGraph)
pruneAndNormalize	../mlrmcl1.2/Lib/mclbase.c	/^void pruneAndNormalize(Matrix* a, int exact, int k)$/;"	f	signature:(Matrix* a, int exact, int k)
pruneAndNormalize	../mlrmcl1.2/Lib/proto.h	/^void pruneAndNormalize(Matrix*,int,int);$/;"	p	signature:(Matrix*,int,int)
prunePercent	../mlrmcl1.2/Lib/struct.h	/^	wgttype prunePercent;$/;"	m	struct:dirToUndirOptionsDef	access:public
pvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^				pvalue = NbinCoeffs[M]$/;"	v
pvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^				pvalue = NbinCoeffs[N-M]$/;"	v
pvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^				pvalue = log10BinCoeff(N,M)$/;"	v
pvalue	../mlrmcl1.2/tools/evaluateClusters.py	/^			pvalue = pvalue - subtract$/;"	v
pvalueThreshold	../mlrmcl1.2/tools/evaluateClusters.py	/^pvalueThreshold = 2 #significance threshold is 0.01$/;"	v
pwgts	../mlrmcl1.2/Lib/struct.h	/^  idxtype *where, *pwgts;$/;"	m	struct:graphdef	access:public
rdata	../mlrmcl1.2/Lib/struct.h	/^  idxtype *gdata, *rdata;	\/* Memory pools for graph and refinement data.$/;"	m	struct:graphdef	access:public
re	../mlrmcl1.2/tools/convertToClusterLists.py	/^import re$/;"	i
re	../mlrmcl1.2/tools/evaluateClusters.py	/^import re$/;"	i
re	../mlrmcl1.2/tools/normMI.py	/^import re$/;"	i
re	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^import re$/;"	i
re	../mlrmcl1.2/tools/wordCount.py	/^	import re$/;"	i
readClustering	../mlrmcl1.2/Lib/io.c	/^int readClustering(const char *filename, int *part, int nvtex){$/;"	f	signature:(const char *filename, int *part, int nvtex)
readClustering	../mlrmcl1.2/Lib/proto.h	/^int readClustering(const char *, int *, int);$/;"	p	signature:(const char *, int *, int)
readGraph	../mlrmcl1.2/io.cc	/^void readGraph(const char* filename) {$/;"	f	signature:(const char* filename)
readMatrixMarketFile	../nlibs/COO.cc	/^void COO::readMatrixMarketFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
readMatrixMarketFile	../nlibs/COO.h	/^	void readMatrixMarketFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
readMatrixMarketFile	../pure_c_spmm/COO.cc	/^void COO::readMatrixMarketFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
readMatrixMarketFile	../pure_c_spmm/COO.h	/^	void readMatrixMarketFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
readMemberships	../mlrmcl1.2/Lib/io.c	/^void readMemberships( char *file, int numMemberships, idxtype$/;"	f	signature:( char *file, int numMemberships, idxtype *members, idxtype **groups_xadj, idxtype **groupIds, idxtype *ngroups)
readMemberships	../mlrmcl1.2/Lib/proto.h	/^void readMemberships(char*, int, idxtype*, idxtype**, idxtype**,$/;"	p	signature:(char*, int, idxtype*, idxtype**, idxtype**, idxtype*)
readTransposedSNAPFile	../nlibs/COO.cc	/^void COO::readTransposedSNAPFile(const char fname[]) {$/;"	f	class:COO	signature:(const char fname[])
readTransposedSNAPFile	../nlibs/COO.h	/^  void readTransposedSNAPFile(const char fname[]);$/;"	p	class:COO	access:public	signature:(const char fname[])
readTransposedSNAPFileTest	../tests/COO_test.cc	/^void readTransposedSNAPFileTest() {$/;"	f	signature:()
rec	../mlrmcl1.2/tools/evaluateClusters.py	/^		rec = m\/n$/;"	v
regexp	../mlrmcl1.2/tools/normMI.py	/^regexp = re.compile("\\\\s+")$/;"	v
regexp	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^regexp = re.compile("\\\\s+")$/;"	v
removeHubs	../mlrmcl1.2/Lib/proto.h	/^idxtype* removeHubs(GraphType*, int, int, GraphType**, int);$/;"	p	signature:(GraphType*, int, int, GraphType**, int)
removeHubs	../mlrmcl1.2/Lib/subgraphs.c	/^idxtype* removeHubs(GraphType *graph, int threshold, int wgtflag,$/;"	f	signature:(GraphType *graph, int threshold, int wgtflag, GraphType **new_graph, int removeSingletons)
removeSelfLoops	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* removeSelfLoops(Matrix* M, int normalizeColumns)$/;"	f	signature:(Matrix* M, int normalizeColumns)
removeSelfLoops	../mlrmcl1.2/Lib/mclutils.c	/^void removeSelfLoops(GraphType* g)$/;"	f	signature:(GraphType* g)
removeSelfLoops	../mlrmcl1.2/Lib/proto.h	/^Matrix* removeSelfLoops(Matrix*, int);$/;"	p	signature:(Matrix*, int)
removeSelfLoops	../mlrmcl1.2/Lib/proto.h	/^void removeSelfLoops(GraphType*);$/;"	p	signature:(GraphType*)
ret	../mlrmcl1.2/Lib/struct.h	/^	Matrix **ret;$/;"	m	struct:threadData	access:public
ret_adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
ret_adjwgt	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
ret_xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
retainTopNeighborsPerNode	../mlrmcl1.2/Lib/proto.h	/^void retainTopNeighborsPerNode(GraphType*, Hashtable* , float );$/;"	p	signature:(GraphType*, Hashtable* , float )
rezero_xb	../nlibs/cpu_csr_kernel.cc	/^void rezero_xb(int i, const int IA[], const int JA[], const int IB[], const int JB[], int IC[], int iJC[], bool xb[]) {$/;"	f	signature:(int i, const int IA[], const int JA[], const int IB[], const int JB[], int IC[], int iJC[], bool xb[])
rezero_xb	../pure_c_spmm/cpu_csr_kernel.cc	/^void rezero_xb(int i, const int IA[], const int JA[], const int IB[], const int JB[], int IC[], int iJC[], bool xb[]) {$/;"	f	signature:(int i, const int IA[], const int JA[], const int IB[], const int JB[], int IC[], int iJC[], bool xb[])
rinfo	../mlrmcl1.2/Lib/struct.h	/^  RInfoType *rinfo;$/;"	m	struct:graphdef	access:public
rinfodef	../mlrmcl1.2/Lib/struct.h	/^struct rinfodef {$/;"	s
rinfodef::ed	../mlrmcl1.2/Lib/struct.h	/^ int id, ed;            	\/* ID\/ED of nodes *\/$/;"	m	struct:rinfodef	access:public
rinfodef::edegrees	../mlrmcl1.2/Lib/struct.h	/^ EDegreeType *edegrees;     	\/* List of edges *\/$/;"	m	struct:rinfodef	access:public
rinfodef::id	../mlrmcl1.2/Lib/struct.h	/^ int id, ed;            	\/* ID\/ED of nodes *\/$/;"	m	struct:rinfodef	access:public
rinfodef::ndegrees	../mlrmcl1.2/Lib/struct.h	/^ int ndegrees;          	\/* The number of different ext-degrees *\/$/;"	m	struct:rinfodef	access:public
rmap	../mlrmcl1.2/Lib/struct.h	/^	idxtype* rmap; \/* This is for mis_coarsen *\/$/;"	m	struct:matrixdef	access:public
rmap1	../mlrmcl1.2/Lib/struct.h	/^  idxtype *rmap1;$/;"	m	struct:graphdef	access:public
rmap2	../mlrmcl1.2/Lib/struct.h	/^  idxtype *rmap2;$/;"	m	struct:graphdef	access:public
rmclInit	../nrmcl.cc	/^CSR rmclInit(COO &cooAt) {$/;"	f	signature:(COO &cooAt)
rmclIter	../nrmcl.cc	/^void rmclIter(const int maxIter, const int gamma, const CSR Mgt, CSR &Mt) {$/;"	f	signature:(const int maxIter, const int gamma, const CSR Mgt, CSR &Mt)
rowCount	../nlibs/CSR.h	/^  inline int rowCount(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
rowInflationR2	../nlibs/CSR.h	/^  void rowInflationR2(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
rowMax	../nlibs/CSR.h	/^  inline double rowMax(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
rowPtr	../nlibs/CSR.h	/^	int* rowPtr;$/;"	m	struct:CSR	access:public
rowPtr	../pure_c_spmm/CSR.h	/^	int* rowPtr;$/;"	m	struct:CSR	access:public
rowSum	../nlibs/CSR.h	/^  inline double rowSum(int rowId) const {$/;"	f	struct:CSR	access:public	signature:(int rowId) const
row_id	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	row_id = int(float(tokens[0]))$/;"	v
row_id	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	row_id = row_id + 1$/;"	v
rows	../nlibs/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
rows	../nlibs/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
rows	../pure_c_spmm/COO.h	/^	int rows, cols, nnz;$/;"	m	class:COO	access:private
rows	../pure_c_spmm/CSR.h	/^	int rows, cols, nnz;$/;"	m	struct:CSR	access:public
rx	../mlrmcl1.2/tools/evaluateClusters.py	/^rx=re.compile("\\\\s+")$/;"	v
s	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^				s = s + " " + ' '.join(adjListMap[current_row_id])$/;"	v
s	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^			s = ' '.join(outLine)$/;"	v
s	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	s = s + " " + ' '.join(adjListMap[row_id])$/;"	v
s	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^s = ' '.join(outLine)$/;"	v
samax	../mlrmcl1.2/Lib/proto.h	/^int samax(int, float *);$/;"	p	signature:(int, float *)
samax	../mlrmcl1.2/Lib/rename.h	454;"	d
samax	../mlrmcl1.2/Lib/util.c	/^int samax(int n, float *x)$/;"	f	signature:(int n, float *x)
samax2	../mlrmcl1.2/Lib/proto.h	/^int samax2(int, float *);$/;"	p	signature:(int, float *)
samax2	../mlrmcl1.2/Lib/rename.h	455;"	d
samax2	../mlrmcl1.2/Lib/util.c	/^int samax2(int n, float *x)$/;"	f	signature:(int n, float *x)
samin	../mlrmcl1.2/Lib/proto.h	/^int samin(int, float *);$/;"	p	signature:(int, float *)
samin	../mlrmcl1.2/Lib/rename.h	457;"	d
samin	../mlrmcl1.2/Lib/util.c	/^int samin(int n, float *x)$/;"	f	signature:(int n, float *x)
saxpy	../mlrmcl1.2/Lib/proto.h	/^void saxpy(int, float, float *, int, float *, int);$/;"	p	signature:(int, float, float *, int, float *, int)
saxpy	../mlrmcl1.2/Lib/rename.h	468;"	d
saxpy	../mlrmcl1.2/Lib/util.c	/^void saxpy(int n, float alpha, float *x, int incx, float *y, int incy)$/;"	f	signature:(int n, float alpha, float *x, int incx, float *y, int incy)
scale	../mlrmcl1.2/Lib/struct.h	/^	wgttype scale;$/;"	m	struct:dirToUndirOptionsDef	access:public
scopy	../mlrmcl1.2/Lib/macros.h	102;"	d
sdot	../mlrmcl1.2/Lib/proto.h	/^float sdot(int n, float *, float *);$/;"	p	signature:(int n, float *, float *)
sdot	../mlrmcl1.2/Lib/rename.h	467;"	d
sdot	../mlrmcl1.2/Lib/util.c	/^float sdot(int n, float *x, float *y)$/;"	f	signature:(int n, float *x, float *y)
seconds	../mlrmcl1.2/Lib/proto.h	/^double seconds(void);$/;"	p	signature:(void)
seconds	../mlrmcl1.2/Lib/rename.h	434;"	d
seconds	../mlrmcl1.2/Lib/util.c	/^double seconds(void)$/;"	f	signature:(void)
sequential_CSR_IC_nnzC	../nlibs/cpu_csr_kernel.cc	/^void sequential_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	f	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, bool xb[], int* IC, int& nnzC )
sequential_CSR_IC_nnzC	../nlibs/cpu_csr_kernel.h	/^void sequential_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	p	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, bool xb[], int* IC, int& nnzC)
sequential_CSR_IC_nnzC	../pure_c_spmm/cpu_csr_kernel.cc	/^void sequential_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	f	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, bool xb[], int* IC, int& nnzC )
sequential_CSR_IC_nnzC	../pure_c_spmm/cpu_csr_kernel.h	/^void sequential_CSR_IC_nnzC(const int IA[], const int JA[],$/;"	p	signature:(const int IA[], const int JA[], const int IB[], const int JB[], const int m, const int n, bool xb[], int* IC, int& nnzC)
sequential_CSR_SpMM	../nlibs/cpu_csr_kernel.cc	/^void sequential_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
sequential_CSR_SpMM	../nlibs/cpu_csr_kernel.h	/^void sequential_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
sequential_CSR_SpMM	../pure_c_spmm/cpu_csr_kernel.cc	/^void sequential_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	f	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
sequential_CSR_SpMM	../pure_c_spmm/cpu_csr_kernel.h	/^void sequential_CSR_SpMM(const int IA[], const int JA[], const double A[], const int nnzA,$/;"	p	signature:(const int IA[], const int JA[], const double A[], const int nnzA, const int IB[], const int JB[], const double B[], const int nnzB, int* &IC, int* &JC, double* &C, int& nnzC, const int m, const int k, const int n)
setupCanonicalMatrix	../mlrmcl1.2/Lib/mclutils.c	/^Matrix* setupCanonicalMatrix(int nvtxs, int nedges, idxtype* xadj,$/;"	f	signature:(int nvtxs, int nedges, idxtype* xadj, idxtype* adjncy, idxtype* adjwgt, int ncutify)
setupCanonicalMatrix	../mlrmcl1.2/Lib/proto.h	/^Matrix* setupCanonicalMatrix(int, int, idxtype*, idxtype*,$/;"	p	signature:(int, int, idxtype*, idxtype*, idxtype*, int )
siqst	../mlrmcl1.2/Lib/myqsort.c	/^static void siqst(idxtype *, idxtype *);$/;"	p	file:	signature:(idxtype *, idxtype *)
siqst	../mlrmcl1.2/Lib/myqsort.c	/^static void siqst(idxtype *base, idxtype *max)$/;"	f	file:	signature:(idxtype *base, idxtype *max)
size	../mlrmcl1.2/tools/evaluateClusters.py	/^	size = int(tokens[0])$/;"	v
sizeIncrement	../mlrmcl1.2/Lib/struct.h	/^	int sizeIncrement;$/;"	m	struct:matrixdef	access:public
sizeOfSetIntersect	../mlrmcl1.2/Lib/proto.h	/^int sizeOfSetIntersect(idxtype*, int, idxtype*, int);$/;"	p	signature:(idxtype*, int, idxtype*, int)
snorm2	../mlrmcl1.2/Lib/proto.h	/^float snorm2(int, float *);$/;"	p	signature:(int, float *)
snorm2	../mlrmcl1.2/Lib/rename.h	466;"	d
snorm2	../mlrmcl1.2/Lib/util.c	/^float snorm2(int n, float *v)$/;"	f	signature:(int n, float *v)
sortAdjLists	../mlrmcl1.2/Lib/mclutils.c	/^void sortAdjLists(int nvtxs, idxtype* xadj, idxtype* adjncy, wgttype* adjwgt)$/;"	f	signature:(int nvtxs, idxtype* xadj, idxtype* adjncy, wgttype* adjwgt)
sortAdjLists	../mlrmcl1.2/Lib/proto.h	/^void sortAdjLists(int, idxtype*, idxtype*, wgttype*);$/;"	p	signature:(int, idxtype*, idxtype*, wgttype*)
sortedNodeIds	../mlrmcl1.2/Lib/struct.h	/^	idxtype *sortedNodeIds; $/;"	m	struct:hashtabledef	access:public
spmm	../nlibs/CSR.cc	/^CSR CSR::spmm(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
spmm	../nlibs/CSR.h	/^  CSR spmm(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
spmm	../pure_c_spmm/CSR.cc	/^CSR CSR::spmm(const CSR& B) {$/;"	f	class:CSR	signature:(const CSR& B)
spmm	../pure_c_spmm/CSR.h	/^  CSR spmm(const CSR& B);$/;"	p	struct:CSR	access:public	signature:(const CSR& B)
spmmFlops	../nlibs/CSR.cc	/^long CSR::spmmFlops(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
spmmFlops	../nlibs/CSR.h	/^  long spmmFlops(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
spmmFlops	../pure_c_spmm/CSR.cc	/^long CSR::spmmFlops(const CSR& B) const {$/;"	f	class:CSR	signature:(const CSR& B) const
spmmFlops	../pure_c_spmm/CSR.h	/^  long spmmFlops(const CSR& B) const;$/;"	p	struct:CSR	access:public	signature:(const CSR& B) const
srand48	../mlrmcl1.2/Lib/proto.h	/^void srand48(long);$/;"	p	signature:(long)
sscale	../mlrmcl1.2/Lib/proto.h	/^void sscale(int n, float, float *x);$/;"	p	signature:(int n, float, float *x)
sscale	../mlrmcl1.2/Lib/rename.h	465;"	d
sscale	../mlrmcl1.2/Lib/util.c	/^void sscale(int n, float alpha, float *x)$/;"	f	signature:(int n, float alpha, float *x)
sset	../mlrmcl1.2/Lib/proto.h	/^float *sset(int n, float val, float *x);$/;"	p	signature:(int n, float val, float *x)
sset	../mlrmcl1.2/Lib/rename.h	450;"	d
sset	../mlrmcl1.2/Lib/util.c	/^float *sset(int n, float val, float *x)$/;"	f	signature:(int n, float val, float *x)
ssum	../mlrmcl1.2/Lib/proto.h	/^float ssum(int, float *);$/;"	p	signature:(int, float *)
ssum	../mlrmcl1.2/Lib/rename.h	463;"	d
ssum	../mlrmcl1.2/Lib/util.c	/^float ssum(int n, float *x)$/;"	f	signature:(int n, float *x)
ssum_strd	../mlrmcl1.2/Lib/proto.h	/^float ssum_strd(int n, float *x, int);$/;"	p	signature:(int n, float *x, int)
ssum_strd	../mlrmcl1.2/Lib/rename.h	464;"	d
ssum_strd	../mlrmcl1.2/Lib/util.c	/^float ssum_strd(int n, float *x, int incx)$/;"	f	signature:(int n, float *x, int incx)
starttimer	../mlrmcl1.2/Lib/macros.h	112;"	d
stdDev	../mlrmcl1.2/tools/evaluateClusters.py	/^	stdDev = l*sumSquaresPvalues - sumPvalues*sumPvalues$/;"	v
stdDev	../mlrmcl1.2/tools/evaluateClusters.py	/^	stdDev = math.sqrt(stdDev)$/;"	v
stdDev	../mlrmcl1.2/tools/evaluateClusters.py	/^	stdDev = stdDev \/ (l*(l-1))$/;"	v
stdDeviation	../mlrmcl1.2/Lib/metrics.c	/^float stdDeviation(idxtype* values, int n)$/;"	f	signature:(idxtype* values, int n)
stdDeviation	../mlrmcl1.2/Lib/proto.h	/^float stdDeviation(idxtype*, int);$/;"	p	signature:(idxtype*, int)
stoptimer	../mlrmcl1.2/Lib/macros.h	113;"	d
subtract	../mlrmcl1.2/tools/evaluateClusters.py	/^			subtract = log10BinCoeff(n,m) +	log10BinCoeff(N-n,M-m)	$/;"	v
sumOfMs	../mlrmcl1.2/tools/evaluateClusters.py	/^	sumOfMs = sumOfMs + len(cluster)$/;"	v
sumOfMs	../mlrmcl1.2/tools/evaluateClusters.py	/^sumOfMs = 0$/;"	v
sumPvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^	sumPvalues = sumPvalues + bestpvalue$/;"	v
sumPvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^sumPvalues = float(0)$/;"	v
sumSquaresPvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^	sumSquaresPvalues = sumSquaresPvalues +	bestpvalue*bestpvalue$/;"	v
sumSquaresPvalues	../mlrmcl1.2/tools/evaluateClusters.py	/^sumSquaresPvalues = float(0)$/;"	v
swapidxtype	../mlrmcl1.2/Lib/mclbase.c	/^void swapidxtype(idxtype* a, idxtype* b)$/;"	f	signature:(idxtype* a, idxtype* b)
swapwgttype	../mlrmcl1.2/Lib/mclbase.c	/^void swapwgttype(wgttype* a, wgttype* b)$/;"	f	signature:(wgttype* a, wgttype* b)
sys	../mlrmcl1.2/tools/convertToClusterLists.py	/^import sys$/;"	i
sys	../mlrmcl1.2/tools/evaluateClusters.py	/^import sys$/;"	i
sys	../mlrmcl1.2/tools/normMI.py	/^import sys$/;"	i
sys	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^import sys$/;"	i
sys	../mlrmcl1.2/tools/wordCount.py	/^	import sys$/;"	i
t	../mlrmcl1.2/tools/normMI.py	/^		t = gtccCount\/N$/;"	v
t	../mlrmcl1.2/tools/normMI.py	/^	t = regexp.split(line.strip())$/;"	v
testCoarsening	../mlrmcl1.2/Lib/mclutils.c	/^void testCoarsening(int *nvtxs, idxtype *xadj, idxtype *adjncy,$/;"	f	signature:(int *nvtxs, idxtype *xadj, idxtype *adjncy, idxtype *vwgt, idxtype *adjwgt, int *wgtflag, int ct)
testCoarsening	../mlrmcl1.2/Lib/proto.h	/^void testCoarsening(int*, idxtype*, idxtype*, idxtype*, idxtype*,$/;"	p	signature:(int*, idxtype*, idxtype*, idxtype*, idxtype*, int*, int)
threadData	../mlrmcl1.2/Lib/struct.h	/^struct threadData {$/;"	s
threadData::adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
threadData::adjwgt	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
threadData::nvtxs	../mlrmcl1.2/Lib/struct.h	/^	int nvtxs;$/;"	m	struct:threadData	access:public
threadData::ret	../mlrmcl1.2/Lib/struct.h	/^	Matrix **ret;$/;"	m	struct:threadData	access:public
threadData::ret_adjncy	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
threadData::ret_adjwgt	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
threadData::ret_xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype **ret_xadj, **ret_adjncy, **ret_adjwgt;$/;"	m	struct:threadData	access:public
threadData::threshold	../mlrmcl1.2/Lib/struct.h	/^	float threshold;$/;"	m	struct:threadData	access:public
threadData::xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
thread_data_t	../nlibs/cpu_csr_kernel.h	/^  thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
thread_data_t	../nlibs/cpu_csr_kernel.h	/^  thread_data_t(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t	../nlibs/cpu_csr_kernel.h	/^struct thread_data_t {$/;"	s
thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  thread_data_t(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^struct thread_data_t {$/;"	s
thread_data_t::iJC	../nlibs/cpu_csr_kernel.h	/^  int *iJC;$/;"	m	struct:thread_data_t	access:public
thread_data_t::iJC	../pure_c_spmm/cpu_csr_kernel.h	/^  int *iJC;$/;"	m	struct:thread_data_t	access:public
thread_data_t::init	../nlibs/cpu_csr_kernel.h	/^  void init(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t::init	../pure_c_spmm/cpu_csr_kernel.h	/^  void init(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t::pad_data	../nlibs/cpu_csr_kernel.h	/^  char pad_data[LEVEL1_DCACHE_LINESIZE];$/;"	m	struct:thread_data_t	access:public
thread_data_t::pad_data	../pure_c_spmm/cpu_csr_kernel.h	/^  char pad_data[LEVEL1_DCACHE_LINESIZE];$/;"	m	struct:thread_data_t	access:public
thread_data_t::thread_data_t	../nlibs/cpu_csr_kernel.h	/^  thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
thread_data_t::thread_data_t	../nlibs/cpu_csr_kernel.h	/^  thread_data_t(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t::thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
thread_data_t::thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  thread_data_t(const int n) {$/;"	f	struct:thread_data_t	access:public	signature:(const int n)
thread_data_t::x	../nlibs/cpu_csr_kernel.h	/^  double* x;$/;"	m	struct:thread_data_t	access:public
thread_data_t::x	../pure_c_spmm/cpu_csr_kernel.h	/^  double* x;$/;"	m	struct:thread_data_t	access:public
thread_data_t::xb	../nlibs/cpu_csr_kernel.h	/^  bool* xb;$/;"	m	struct:thread_data_t	access:public
thread_data_t::xb	../pure_c_spmm/cpu_csr_kernel.h	/^  bool* xb;$/;"	m	struct:thread_data_t	access:public
thread_data_t::~thread_data_t	../nlibs/cpu_csr_kernel.h	/^  ~thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
thread_data_t::~thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  ~thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
threshPrune	../mlrmcl1.2/Lib/mclbase.c	/^wgttype threshPrune(int *n, idxtype* adjncy, wgttype* adjwgt,$/;"	f	signature:(int *n, idxtype* adjncy, wgttype* adjwgt, wgttype thresh, wgttype initsum)
threshold	../mlrmcl1.2/Lib/struct.h	/^	float threshold;$/;"	m	struct:threadData	access:public
threshold	../mlrmcl1.2/Lib/struct.h	/^	wgttype threshold;$/;"	m	struct:dirToUndirOptionsDef	access:public
time_in_mill_now	../nlibs/ntimer.cc	/^double time_in_mill_now() {$/;"	f	signature:()
time_in_mill_now	../nlibs/ntimer.h	/^double time_in_mill_now();$/;"	p	signature:()
time_in_mill_now	../pure_c_spmm/ntimer.cc	/^double time_in_mill_now() {$/;"	f	signature:()
time_in_mill_now	../pure_c_spmm/ntimer.h	/^double time_in_mill_now();$/;"	p	signature:()
timer	../mlrmcl1.2/Lib/struct.h	/^typedef double timer;$/;"	t
timestamp	../nlibs/mm_io.cc	/^void timestamp ( void )$/;"	f	signature:( void )
timestamp	../nlibs/mm_io.h	/^void timestamp ( void );$/;"	p	signature:( void )
timestamp	../pure_c_spmm/mm_io.cc	/^void timestamp ( void )$/;"	f	signature:( void )
timestamp	../pure_c_spmm/mm_io.h	/^void timestamp ( void );$/;"	p	signature:( void )
toCSR	../nlibs/COO.cc	/^CSR COO::toCSR() const {$/;"	f	class:COO	signature:() const
toCSR	../nlibs/COO.h	/^	CSR toCSR() const;$/;"	p	class:COO	access:public	signature:() const
toCSR	../pure_c_spmm/COO.cc	/^CSR COO::toCSR() const {$/;"	f	class:COO	signature:() const
toCSR	../pure_c_spmm/COO.h	/^	CSR toCSR() const;$/;"	p	class:COO	access:public	signature:() const
tokens	../mlrmcl1.2/tools/evaluateClusters.py	/^	tokens = rx.split(line)$/;"	v
tokens	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	tokens = regexp.split(line.strip())$/;"	v
transformAdj	../mlrmcl1.2/Lib/mclbase.c	/^Matrix* transformAdj(Matrix* flows, Matrix* input_adj, $/;"	f	signature:(Matrix* flows, Matrix* input_adj, Options opt)
transformAdj	../mlrmcl1.2/Lib/struct.h	/^	int transformAdj;$/;"	m	struct:optionsdef	access:public
type	../mlrmcl1.2/Lib/struct.h	/^  int type;                     \/* The type of the representation used *\/$/;"	m	struct:PQueueType	access:public
u	../mlrmcl1.2/tools/normMI.py	/^		u = logN+math.log(gtccCount,2)-gtcCount-math.log(clusterCount,2)$/;"	v
val	../mlrmcl1.2/Lib/struct.h	/^  idxtype val;$/;"	m	struct:KeyValueType	access:public
values	../nlibs/CSR.h	/^	double* values;$/;"	m	struct:CSR	access:public
values	../pure_c_spmm/CSR.h	/^	double* values;$/;"	m	struct:CSR	access:public
vedegreedef	../mlrmcl1.2/Lib/struct.h	/^struct vedegreedef {$/;"	s
vedegreedef::ed	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed, ned;$/;"	m	struct:vedegreedef	access:public
vedegreedef::gv	../mlrmcl1.2/Lib/struct.h	/^  idxtype gv;$/;"	m	struct:vedegreedef	access:public
vedegreedef::ned	../mlrmcl1.2/Lib/struct.h	/^  idxtype ed, ned;$/;"	m	struct:vedegreedef	access:public
vedegreedef::pid	../mlrmcl1.2/Lib/struct.h	/^  idxtype pid;$/;"	m	struct:vedegreedef	access:public
vedegrees	../mlrmcl1.2/Lib/struct.h	/^  VEDegreeType *vedegrees;$/;"	m	struct:workspacedef	access:public
vols	../mlrmcl1.2/Lib/struct.h	/^	wgttype* vols; \/\/ volumes, i.e. sum of edge weights$/;"	m	struct:listgraphdef	access:public
vpwgtdef	../mlrmcl1.2/Lib/struct.h	/^struct vpwgtdef {$/;"	s
vpwgtdef::imax	../mlrmcl1.2/Lib/struct.h	/^  int imax[2][MAXNCON];$/;"	m	struct:vpwgtdef	access:public
vpwgtdef::max	../mlrmcl1.2/Lib/struct.h	/^  float max[2][MAXNCON];$/;"	m	struct:vpwgtdef	access:public
vrinfo	../mlrmcl1.2/Lib/struct.h	/^  VRInfoType *vrinfo;$/;"	m	struct:graphdef	access:public
vrinfodef	../mlrmcl1.2/Lib/struct.h	/^struct vrinfodef {$/;"	s
vrinfodef::ed	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
vrinfodef::edegrees	../mlrmcl1.2/Lib/struct.h	/^ VEDegreeType *edegrees;     	\/* List of edges *\/$/;"	m	struct:vrinfodef	access:public
vrinfodef::gv	../mlrmcl1.2/Lib/struct.h	/^ int gv;            		\/* IV\/EV of nodes *\/$/;"	m	struct:vrinfodef	access:public
vrinfodef::id	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
vrinfodef::ndegrees	../mlrmcl1.2/Lib/struct.h	/^ int ndegrees;          	\/* The number of different ext-degrees *\/$/;"	m	struct:vrinfodef	access:public
vrinfodef::nid	../mlrmcl1.2/Lib/struct.h	/^ int id, ed, nid;            	\/* ID\/ED of nodes *\/$/;"	m	struct:vrinfodef	access:public
vsize	../mlrmcl1.2/Lib/struct.h	/^  idxtype *vsize;		\/* Vertex sizes for min-volume formulation *\/$/;"	m	struct:graphdef	access:public
vwgt	../mlrmcl1.2/Lib/struct.h	/^  idxtype *vwgt;		\/* Vertex weights *\/$/;"	m	struct:graphdef	access:public
wavgF	../mlrmcl1.2/tools/evaluateClusters.py	/^	wavgF = wgtdAvgF \/ normalizer$/;"	v
wavgP	../mlrmcl1.2/tools/evaluateClusters.py	/^	wavgP = wgtdAvgP \/ normalizer$/;"	v
wavgR	../mlrmcl1.2/tools/evaluateClusters.py	/^	wavgR = wgtdAvgR \/ normalizer$/;"	v
weights	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	weights = False$/;"	v
weights	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	weights = True$/;"	v
weights	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^weights = int(args[3])$/;"	v
wgtLists	../mlrmcl1.2/Lib/struct.h	/^	ListWgt* wgtLists;$/;"	m	struct:listgraphdef	access:public
wgtMap	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^wgtMap = {}$/;"	v
wgtdAvgF	../mlrmcl1.2/tools/evaluateClusters.py	/^	wgtdAvgF = wgtdAvgF + M*bestf$/;"	v
wgtdAvgF	../mlrmcl1.2/tools/evaluateClusters.py	/^wgtdAvgF = float(0)$/;"	v
wgtdAvgP	../mlrmcl1.2/tools/evaluateClusters.py	/^	wgtdAvgP = wgtdAvgP + M*bestp$/;"	v
wgtdAvgP	../mlrmcl1.2/tools/evaluateClusters.py	/^wgtdAvgP = float(0)$/;"	v
wgtdAvgR	../mlrmcl1.2/tools/evaluateClusters.py	/^	wgtdAvgR = wgtdAvgR + M*bestr$/;"	v
wgtdAvgR	../mlrmcl1.2/tools/evaluateClusters.py	/^wgtdAvgR = float(0)$/;"	v
wgtlistdef	../mlrmcl1.2/Lib/struct.h	/^struct wgtlistdef{$/;"	s
wgtlistdef::allocSize	../mlrmcl1.2/Lib/struct.h	/^	int allocSize;$/;"	m	struct:wgtlistdef	access:public
wgtlistdef::increment	../mlrmcl1.2/Lib/struct.h	/^	int increment;$/;"	m	struct:wgtlistdef	access:public
wgtlistdef::l	../mlrmcl1.2/Lib/struct.h	/^	wgttype* l;$/;"	m	struct:wgtlistdef	access:public
wgtlistdef::length	../mlrmcl1.2/Lib/struct.h	/^	int length;$/;"	m	struct:wgtlistdef	access:public
wgtset	../mlrmcl1.2/Lib/util.c	/^wgttype* wgtset(int n, wgttype val, wgttype *x)$/;"	f	signature:(int n, wgttype val, wgttype *x)
wgttype	../mlrmcl1.2/Lib/struct.h	/^typedef double wgttype;$/;"	t
wgttype	../mlrmcl1.2/Lib/struct.h	/^typedef float wgttype;$/;"	t
where	../mlrmcl1.2/Lib/struct.h	/^  idxtype *where, *pwgts;$/;"	m	struct:graphdef	access:public
wordcount	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^	from wordCount import wordcount$/;"	i
wordcount	../mlrmcl1.2/tools/wordCount.py	/^def wordcount(fname, needwords=False):$/;"	f	access:public
workspacedef	../mlrmcl1.2/Lib/struct.h	/^struct workspacedef {$/;"	s
workspacedef::auxcore	../mlrmcl1.2/Lib/struct.h	/^  idxtype *auxcore;			\/* This points to the memory of the edegrees *\/$/;"	m	struct:workspacedef	access:public
workspacedef::ccore	../mlrmcl1.2/Lib/struct.h	/^  int maxcore, ccore;$/;"	m	struct:workspacedef	access:public
workspacedef::cdegree	../mlrmcl1.2/Lib/struct.h	/^  int cdegree;$/;"	m	struct:workspacedef	access:public
workspacedef::core	../mlrmcl1.2/Lib/struct.h	/^  idxtype *core;			\/* Where pairs, indices, and degrees are coming from *\/$/;"	m	struct:workspacedef	access:public
workspacedef::edegrees	../mlrmcl1.2/Lib/struct.h	/^  EDegreeType *edegrees;$/;"	m	struct:workspacedef	access:public
workspacedef::maxcore	../mlrmcl1.2/Lib/struct.h	/^  int maxcore, ccore;$/;"	m	struct:workspacedef	access:public
workspacedef::pmat	../mlrmcl1.2/Lib/struct.h	/^  idxtype *pmat;			\/* An array of k^2 used for eliminating domain $/;"	m	struct:workspacedef	access:public
workspacedef::vedegrees	../mlrmcl1.2/Lib/struct.h	/^  VEDegreeType *vedegrees;$/;"	m	struct:workspacedef	access:public
wspace	../mlrmcl1.2/Lib/struct.h	/^  WorkSpaceType wspace;		\/* Work Space Informations *\/$/;"	m	struct:controldef	access:public
wt	../mlrmcl1.2/tools/sortedEdgesToMetis.py	/^		wt = float(tokens[2])$/;"	v
x	../nlibs/cpu_csr_kernel.h	/^  double* x;$/;"	m	struct:thread_data_t	access:public
x	../pure_c_spmm/cpu_csr_kernel.h	/^  double* x;$/;"	m	struct:thread_data_t	access:public
xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype *xadj, *adjncy, *adjwgt;$/;"	m	struct:threadData	access:public
xadj	../mlrmcl1.2/Lib/struct.h	/^	idxtype* xadj; \/* xadj[i+1]-xadj[i] gives the number of$/;"	m	struct:matrixdef	access:public
xadj	../mlrmcl1.2/Lib/struct.h	/^  idxtype *xadj;		\/* Pointers to the locally stored vertices *\/$/;"	m	struct:graphdef	access:public
xb	../nlibs/cpu_csr_kernel.h	/^  bool* xb;$/;"	m	struct:thread_data_t	access:public
xb	../pure_c_spmm/cpu_csr_kernel.h	/^  bool* xb;$/;"	m	struct:thread_data_t	access:public
~COO	../nlibs/COO.cc	/^COO::~COO() {$/;"	f	class:COO	signature:()
~COO	../nlibs/COO.h	/^	virtual ~COO();$/;"	p	class:COO	access:public	signature:()
~COO	../pure_c_spmm/COO.cc	/^COO::~COO() {$/;"	f	class:COO	signature:()
~COO	../pure_c_spmm/COO.h	/^	virtual ~COO();$/;"	p	class:COO	access:public	signature:()
~CSR	../nlibs/CSR.h	/^  ~CSR() {$/;"	f	struct:CSR	access:public	signature:()
~CSR	../pure_c_spmm/CSR.h	/^  ~CSR() {$/;"	f	struct:CSR	access:public	signature:()
~thread_data_t	../nlibs/cpu_csr_kernel.h	/^  ~thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
~thread_data_t	../pure_c_spmm/cpu_csr_kernel.h	/^  ~thread_data_t() {$/;"	f	struct:thread_data_t	access:public	signature:()
